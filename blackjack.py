{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import some modules\n",
    "import numpy as np\n",
    "import random\n",
    "import math\n",
    "import scipy.stats as stats\n",
    "from scipy.stats import pearsonr\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.pipeline import Pipeline, make_pipeline\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.ticker import PercentFormatter\n",
    "from scipy.stats import linregress\n",
    "%matplotlib inline\n",
    "\n",
    "# define the rules of basic strategy for two players in Blackjack\n",
    "def basic_strategy(dh, ph, cards_dealt, deck, bet):\n",
    "    \"\"\"\n",
    "    Makes blackjack moves (hit, stay, split for the player based on basic strategy)\n",
    "    \"\"\"\n",
    "    \n",
    "    trigger = 0\n",
    "    ph2 = []\n",
    "    \n",
    "    # make sure the dealer hits until 17\n",
    "    while ((np.sum(dh) <= 17) and (len(deck) >= 1)):\n",
    "\n",
    "        dh.append(deck[0])         \n",
    "        cards_dealt.append(deck[0])         \n",
    "        deck.remove(deck[0]) \n",
    "        \n",
    "    if (trigger == 0):\n",
    "        if (((ph[0] == 2 and ph[1] == 2) or (ph[0] == 3 and ph[1] == 3)) \\\n",
    "            and ((dh[0] == 2) or (dh[0] == 3) or (dh[0] == 4) or (dh[0] == 5) or (dh[0] == 6) \\\n",
    "                 or (dh[0] == 7)) and (len(deck) > 1)):\n",
    "            \n",
    "            # split the hand into two seperate hands \n",
    "            ph2 = []\n",
    "            \n",
    "            ph2.append(ph[0])\n",
    "            ph.remove(ph[0])\n",
    "            ph.append(deck[0])\n",
    "            cards_dealt.append(deck[0])\n",
    "            deck.remove(deck[0])\n",
    "            ph2.append(deck[0])\n",
    "            cards_dealt.append(deck[0])\n",
    "            deck.remove(deck[0])\n",
    "            \n",
    "\n",
    "        elif (ph[0] == 4 and ph[1] == 4) and (dh[0] == 5 or dh[0] == 6) and (len(deck) > 1):\n",
    "            \n",
    "            # split the hand into two seperate hands \n",
    "            ph2 = []\n",
    "            \n",
    "            ph2.append(ph[0])\n",
    "            ph.remove(ph[0])\n",
    "            ph.append(deck[0])\n",
    "            cards_dealt.append(deck[0])\n",
    "            deck.remove(deck[0])\n",
    "            ph2.append(deck[0])\n",
    "            cards_dealt.append(deck[0])\n",
    "            deck.remove(deck[0])\n",
    "            \n",
    "        elif (ph[0] == 6 and ph[1] == 6) and (dh[0] == 2 or dh[0] == 3 or dh[0] == 4 \\\n",
    "                                              or dh[0] == 5 or dh[0] == 6) and (len(deck) > 1):\n",
    "\n",
    "            # split the hand into two seperate hands \n",
    "            ph2 = []\n",
    "            \n",
    "            ph2.append(ph[0])\n",
    "            ph.remove(ph[0])\n",
    "            ph.append(deck[0])\n",
    "            cards_dealt.append(deck[0])\n",
    "            deck.remove(deck[0])\n",
    "            ph2.append(deck[0])\n",
    "            cards_dealt.append(deck[0])\n",
    "            deck.remove(deck[0])\n",
    "            \n",
    "            \n",
    "        elif (ph[0] == 7 and ph[1] == 7) and (dh[0] == 2 or dh[0] == 3 or dh[0] == 4 \\\n",
    "                                              or dh[0] == 5 or dh[0] == 6 or dh[0] == 7) and (len(deck) > 1):\n",
    "            \n",
    "             \n",
    "            # split the hand into two seperate hands \n",
    "            ph2 = []\n",
    "            \n",
    "            ph2.append(ph[0])\n",
    "            ph.remove(ph[0])\n",
    "            ph.append(deck[0])\n",
    "            cards_dealt.append(deck[0])\n",
    "            deck.remove(deck[0])\n",
    "            ph2.append(deck[0])\n",
    "            cards_dealt.append(deck[0])\n",
    "            deck.remove(deck[0])\n",
    "            \n",
    "            \n",
    "        elif ((ph[0] == 8 and ph[1] == 8) and (len(deck) > 1)):\n",
    "            \n",
    "\n",
    "            # split the hand into two seperate hands \n",
    "            ph2 = []\n",
    "            \n",
    "            ph2.append(ph[0])\n",
    "            ph.remove(ph[0])\n",
    "            ph.append(deck[0])\n",
    "            cards_dealt.append(deck[0])\n",
    "            deck.remove(deck[0])\n",
    "            ph2.append(deck[0])\n",
    "            cards_dealt.append(deck[0])\n",
    "            deck.remove(deck[0])\n",
    "            \n",
    "                \n",
    "        elif ((ph[0] == 9 and ph[1] == 9) and (dh[0] == 2 or dh[0] == 3 or dh[0] == 4 \\\n",
    "                                              or dh[0] == 5 or dh[0] == 6 or dh[0] == 8 \\\n",
    "                                              or dh[0] == 9) and (len(deck) > 1)):\n",
    "            \n",
    "            # split the hand into two seperate hands \n",
    "            ph2 = []\n",
    "            \n",
    "            ph2.append(ph[0])\n",
    "            ph.remove(ph[0])\n",
    "            ph.append(deck[0])\n",
    "            cards_dealt.append(deck[0])\n",
    "            deck.remove(deck[0])\n",
    "            ph2.append(deck[0])\n",
    "            cards_dealt.append(deck[0])\n",
    "            deck.remove(deck[0])\n",
    "            \n",
    "            \n",
    "        elif ((ph[0] == 11 and ph[1] == 11) and (len(deck) > 1)):\n",
    "            \n",
    "            # split the hand into two seperate hands \n",
    "            ph2 = []\n",
    "            \n",
    "            ph2.append(ph[0])\n",
    "            ph.remove(ph[0])\n",
    "            ph.append(deck[0])\n",
    "            cards_dealt.append(deck[0])\n",
    "            deck.remove(deck[0])\n",
    "            ph2.append(deck[0])\n",
    "            cards_dealt.append(deck[0])\n",
    "            deck.remove(deck[0])\n",
    "            \n",
    "        else:\n",
    "             pass   \n",
    "          \n",
    "        # hit stay conditions if a split was made \n",
    "        if ((len(ph2) > 0) and (len(deck) > 1) and (np.sum(ph2) <= 17)):  \n",
    "            while ((np.sum(ph2) <= 17) and (len(deck) >= 1)): \n",
    "                if (((np.sum(ph2) == 5) or (np.sum(ph2) == 6) or (np.sum(ph2) == 7) or (np.sum(ph2) == 8)) and (len(deck) > 1)):\n",
    "\n",
    "                    ph2.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif (((np.sum(ph2) == 9) and (dh[0] == 2 or dh[0] == 6 or dh[0] == 7 or dh[0] == 8\n",
    "                                                or dh[0] == 9 or dh[0] == 10 or dh[0] == 11)) and (len(deck) > 1)):\n",
    "\n",
    "                    ph2.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph2) == 9) and (dh[0] == 3 or dh[0] == 4 or dh[0] == 5) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph2.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "\n",
    "                elif ((np.sum(ph2) == 10) and ((dh[0] >= 2) and (dh[0] <= 9)) and (len(deck) > 1)):\n",
    "\n",
    "                        #print('double')\n",
    "                        ph2.append(deck[0])\n",
    "                        cards_dealt.append(deck[0])\n",
    "                        deck.remove(deck[0])\n",
    "                        bet = (bet * 2)\n",
    "                        return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "\n",
    "                elif ((np.sum(ph2) == 10) and ((dh[0] == 10) or (dh[0] == 11)) and (len(deck) > 1)):\n",
    "\n",
    "                        ph2.append(deck[0])      \n",
    "                        cards_dealt.append(deck[0])        \n",
    "                        deck.remove(deck[0]) \n",
    "                        continue\n",
    "\n",
    "                elif ((np.sum(ph2) == 11) and ((dh[0] >= 2) and (dh[0] <= 10)) and (len(deck) > 1)):\n",
    "\n",
    "                       # print('double')\n",
    "                        ph2.append(deck[0])\n",
    "                        cards_dealt.append(deck[0])\n",
    "                        deck.remove(deck[0])\n",
    "                        bet = (bet * 2)\n",
    "                        return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "\n",
    "                elif ((np.sum(ph2) == 11) and (dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                        ph2.append(deck[0])    \n",
    "                        cards_dealt.append(deck[0])         \n",
    "                        deck.remove(deck[0]) \n",
    "                        continue\n",
    "\n",
    "                elif ((np.sum(ph2) == 12) and (((dh[0] == 2) or (dh[0] == 3)) \n",
    "                                                  or ((dh[0] >= 7) and (dh[0] <= 11))) and (len(deck) > 1)):\n",
    "\n",
    "                        ph2.append(deck[0])       \n",
    "                        cards_dealt.append(deck[0])         \n",
    "                        deck.remove(deck[0]) \n",
    "                        continue\n",
    "\n",
    "                elif (((np.sum(ph2) == 13) or (np.sum(ph2) == 14) or (np.sum(ph2) == 15) \n",
    "                          or (np.sum(ph2) == 16)) and ((dh[0] >= 7) and (dh[0] <= 11)) and (len(deck) > 1)):\n",
    "\n",
    "                        ph2.append(deck[0])         \n",
    "                        cards_dealt.append(deck[0])         \n",
    "                        deck.remove(deck[0])\n",
    "                        continue\n",
    "                        \n",
    "                elif (((ph2[0] == 2 and ph2[1] == 2) or (ph2[0] == 3 and ph2[1] == 3)) \\\n",
    "                    and (dh[0] == 8 or dh[0] == 9 or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                        ph2.append(deck[0])\n",
    "                        cards_dealt.append(deck[0])\n",
    "                        deck.remove(deck[0]) \n",
    "                        continue\n",
    "\n",
    "                elif ((ph2[0] == 4 and ph2[1] == 4) and (dh[0] == 2 or dh[0] == 3 or dh[0] == 4 \\\n",
    "                                                         or dh[0] == 7 or dh[0] == 8 or dh[0] == 9 \\\n",
    "                                                          or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                        ph2.append(deck[0])         \n",
    "                        cards_dealt.append(deck[0])         \n",
    "                        deck.remove(deck[0]) \n",
    "                        continue\n",
    "\n",
    "                elif ((ph2[0] == 5 and ph2[1] == 5) and (dh[0] == 2 or dh[0] == 3 or dh[0] == 4 \\\n",
    "                                                          or dh[0] == 5 or dh[0] == 6 or dh[0] == 7 \\\n",
    "                                                          or dh[0] == 8 or dh[0] == 9) and (len(deck) > 1)):\n",
    "                        #print('double')\n",
    "                        ph2.append(deck[0])\n",
    "                        cards_dealt.append(deck[0])\n",
    "                        deck.remove(deck[0]) \n",
    "                        bet = (bet * 2)\n",
    "                        return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "\n",
    "                elif ((ph2[0] == 5 and ph2[1] == 5) and (dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                        ph2.append(deck[0])         \n",
    "                        cards_dealt.append(deck[0])         \n",
    "                        deck.remove(deck[0]) \n",
    "                        continue\n",
    "\n",
    "\n",
    "                elif ((ph2[0] == 6 and ph2[1] == 6) and (dh[0] == 7 or dh[0] == 8 or dh[0] == 9 \\\n",
    "                                                          or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                        ph2.append(deck[0])         \n",
    "                        cards_dealt.append(deck[0])   \n",
    "                        deck.remove(deck[0])\n",
    "                        continue\n",
    "\n",
    "                elif ((ph2[0] == 7 and ph2[1] == 7) and (dh[0] == 8 or dh[0] == 9 or dh[0] == 10 \\\n",
    "                                                          or dh[0] == 11) and (len(deck) > 1)):\n",
    "                        ph2.append(deck[0])      \n",
    "                        cards_dealt.append(deck[0])         \n",
    "                        deck.remove(deck[0])\n",
    "                        continue\n",
    "\n",
    "                elif ((ph2[0] == 11 and ph2[1] == 2) or (ph2[0] == 2 and ph2[1] == 11) \\\n",
    "                          or (ph2[0] == 11 and ph2[1] == 3) or (ph2[0] == 3 and ph2[1] == 11) \\\n",
    "                    and (dh[0] == 2 or dh[0] == 3 or dh[0] == 4 or dh[0] == 7 or dh[0] == 8 \\\n",
    "                         or dh[0] == 9 or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                        ph2.append(deck[0])        \n",
    "                        cards_dealt.append(deck[0])         \n",
    "                        deck.remove(deck[0]) \n",
    "                        continue\n",
    "\n",
    "                elif ((ph2[0] == 11 and ph2[1] == 2) or (ph2[0] == 2 and ph2[1] == 11) \\\n",
    "                          or (ph2[0] == 11 and ph2[1] == 3) or (ph2[0] == 3 and ph2[1] == 11) \\\n",
    "                    and (dh[0] == 5 or dh[0] == 6)) and (len(deck) > 1):\n",
    "\n",
    "                        #print('double')\n",
    "                        ph2.append(deck[0])\n",
    "                        cards_dealt.append(deck[0])\n",
    "                        deck.remove(deck[0]) \n",
    "                        bet = (bet * 2)\n",
    "                        return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "\n",
    "                elif ((ph2[0] == 11 and ph2[1] == 4) or (ph2[0] == 4 and ph2[1] == 11) \\\n",
    "                          or (ph2[0] == 11 and ph2[1] == 5) and (dh[0] == 2 or dh[0] == 3 \n",
    "                                                               or dh[0] == 7 or dh[0] == 8 \n",
    "                                                               or dh[0] == 9 or dh[0] == 10 \n",
    "                                                               or dh[0] == 11) and (len(deck) > 1)):\n",
    "                        ph2.append(deck[0])        \n",
    "                        cards_dealt.append(deck[0])         \n",
    "                        deck.remove(deck[0]) \n",
    "                        continue\n",
    "\n",
    "                elif ((ph2[0] == 11 and ph2[1] == 4) or (ph2[0] == 4 and ph2[1] == 11) \n",
    "                          or (ph2[0] == 11 and ph2[1] == 5) \n",
    "                          or (ph2[0] == 5 and ph2[1] == 11)) and (dh[0] == 4 or dh[0] == 5 \n",
    "                                                                or dh[0] == 6):\n",
    "\n",
    "                        #print('double')\n",
    "                        ph2.append(deck[0])\n",
    "                        cards_dealt.append(deck[0])\n",
    "                        deck.remove(deck[0]) \n",
    "                        bet = (bet * 2)\n",
    "                        return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "\n",
    "                elif ((ph2[0] == 11 and ph2[1] == 6) or (ph2[0] == 6 and ph2[1] == 11) \n",
    "                          and (dh[0] == 2 or dh[0] == 7 or dh[0] == 8 or dh[0] == 9 or dh[0] == 10 \n",
    "                               or dh[0] == 11) and (len(deck) > 1)):\n",
    "                        ph2.append(deck[0])       \n",
    "                        cards_dealt.append(deck[0])         \n",
    "                        deck.remove(deck[0]) \n",
    "                        continue\n",
    "\n",
    "                elif ((ph2[0] == 11 and ph2[1] == 6) or (ph2[0] == 6 and ph2[1] == 11) \n",
    "                          or (ph2[0] == 11 and ph2[1] == 7) or (ph2[0] == 7 and ph2[1] == 11) \\\n",
    "                          and (dh[0] == 3 or dh[0] == 4 or dh[0] == 5 or dh[0] == 6) and (len(deck) > 1)):\n",
    "\n",
    "                        #print('double')\n",
    "                        ph2.append(deck[0])\n",
    "                        cards_dealt.append(deck[0])\n",
    "                        deck.remove(deck[0]) \n",
    "                        bet = (bet * 2)\n",
    "                        return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "                elif ((ph2[0] == 11 and ph2[1] == 7) or (ph2[0] == 7 and ph2[1] == 11) \\\n",
    "                          and (dh[0] == 9 or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                        ph2.append(deck[0])         \n",
    "                        cards_dealt.append(deck[0])        \n",
    "                        deck.remove(deck[0]) \n",
    "                        continue\n",
    "                        \n",
    "                else:\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "                        \n",
    "                        \n",
    "            while ((np.sum(ph) <= 17) and (len(deck) > 1)):\n",
    "                \n",
    "                if (((np.sum(ph) == 5) or (np.sum(ph) == 6) or (np.sum(ph) == 7) or (np.sum(ph) == 8)) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 9) and (dh[0] == 2 or dh[0] == 6 or dh[0] == 7 or dh[0] == 8\n",
    "                                            or dh[0] == 9 or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 9) and (dh[0] == 3 or dh[0] == 4 or dh[0] == 5) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "                elif ((np.sum(ph) == 10) and ((dh[0] >= 2) and (dh[0] <= 9)) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "                elif ((np.sum(ph) == 10) and ((dh[0] == 10) or (dh[0] == 11)) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])      \n",
    "                    cards_dealt.append(deck[0])        \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 11) and ((dh[0] >= 2) and (dh[0] <= 10)) and (len(deck) > 1)):\n",
    "\n",
    "                   # print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "                elif ((np.sum(ph) == 11) and (dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])    \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 12) and (((dh[0] == 2) or (dh[0] == 3)) \n",
    "                                              or ((dh[0] >= 7) and (dh[0] <= 11))) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])       \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif (((np.sum(ph) == 13) or (np.sum(ph) == 14) or (np.sum(ph) == 15) \n",
    "                      or (np.sum(ph) == 16)) and ((dh[0] >= 2) and (dh[0] <= 6))):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "                \n",
    "                elif (((np.sum(ph) == 13) or (np.sum(ph) == 14) or (np.sum(ph) == 15) \n",
    "                      or (np.sum(ph) == 16)) and ((dh[0] >= 7) and (dh[0] <= 11)) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif (((ph[0] == 2 and ph[1] == 2) or (ph[0] == 3 and ph[1] == 3)) \\\n",
    "                and (dh[0] == 8 or dh[0] == 9 or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph[0] == 4 and ph[1] == 4) and (dh[0] == 2 or dh[0] == 3 or dh[0] == 4 \\\n",
    "                                                     or dh[0] == 7 or dh[0] == 8 or dh[0] == 9 \\\n",
    "                                                      or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "\n",
    "                elif ((ph[0] == 5 and ph[1] == 5) and (dh[0] == 2 or dh[0] == 3 or dh[0] == 4 \\\n",
    "                                                      or dh[0] == 5 or dh[0] == 6 or dh[0] == 7 \\\n",
    "                                                      or dh[0] == 8 or dh[0] == 9) and (len(deck) > 1)):\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "                elif ((ph[0] == 5 and ph[1] == 5) and (dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "\n",
    "                elif ((ph[0] == 6 and ph[1] == 6) and (dh[0] == 7 or dh[0] == 8 or dh[0] == 9 \\\n",
    "                                                      or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "\n",
    "\n",
    "                elif ((ph[0] == 7 and ph[1] == 7) and (dh[0] == 8 or dh[0] == 9 or dh[0] == 10 \\\n",
    "                                                      or dh[0] == 11) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])      \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph[0] == 9 and ph[1] == 9) and (dh[0] == 7 or dh[0] == 10 or dh[0] == 11)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "                elif ((ph[0] == 10 and ph[1] == 10)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "\n",
    "                elif ((((ph[0] == 11) and (ph[1] == 2)) or ((ph[0] == 2) and (ph[1] == 11))\n",
    "                      or ((ph[0] == 11) and (ph[1] == 3)) or ((ph[0] == 3) and (ph[1] == 11))) \\\n",
    "                and ((dh[0] == 2) or (dh[0] == 3) or (dh[0] == 4) or (dh[0] == 7) or (dh[0] == 8) \\\n",
    "                     or (dh[0] == 9) or (dh[0] == 10) or (dh[0] == 11)) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 2) or (ph[0] == 2 and ph[1] == 11)\n",
    "                      or (ph[0] == 11 and ph[1] == 3) or (ph[0] == 3 and ph[1] == 11) \\\n",
    "                and (dh[0] == 5 or dh[0] == 6) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 4) or (ph[0] == 4 and ph[1] == 11) \n",
    "                      or (ph[0] == 11 and ph[1] == 5) and (dh[0] == 2 or dh[0] == 3 \n",
    "                                                           or dh[0] == 7 or dh[0] == 8 \n",
    "                                                           or dh[0] == 9 or dh[0] == 10 \n",
    "                                                           or dh[0] == 11) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif (((ph[0] == 11 and ph[1] == 4) or (ph[0] == 4 and ph[1] == 11) \n",
    "                      or (ph[0] == 11 and ph[1] == 5) \n",
    "                      or (ph[0] == 5 and ph[1] == 11)) and (dh[0] == 4 or dh[0] == 5 \n",
    "                                                            or dh[0] == 6) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 6) or (ph[0] == 6 and ph[1] == 11) \n",
    "                      and (dh[0] == 2 or dh[0] == 7 or dh[0] == 8 or dh[0] == 9 or dh[0] == 10 \n",
    "                           or dh[0] == 11) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])       \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 6) or (ph[0] == 6 and ph[1] == 11) \n",
    "                      or (ph[0] == 11 and ph[1] == 7) or (ph[0] == 7 and ph[1] == 11) \\\n",
    "                      and (dh[0] == 3 or dh[0] == 4 or dh[0] == 5 or dh[0] == 6) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 7) or (ph[0] == 7 and ph[1] == 11) \\\n",
    "                      and (dh[0] == 2 or dh[0] == 7 or dh[0] == 8)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 7) or (ph[0] == 7 and ph[1] == 11) \\\n",
    "                      and (dh[0] == 9 or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])        \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph[0] == 11 and (ph[1] == 8 or ph[1] == 9 or ph[1] == 10)) \n",
    "                      or ((ph[0] == 8 or ph[1] == 9 or ph[1] == 10) and ph[1] == 11)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "                    \n",
    "                else:\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "                    \n",
    "\n",
    "        # conditions if no split was made\n",
    "        elif ((len(ph2) == 0) and (len(deck) > 1) and (np.sum(ph2) <= 17)):    \n",
    "             while ((np.sum(ph) <= 17) and (len(deck) > 1)):  \n",
    "                if (((np.sum(ph) == 5) or (np.sum(ph) == 6) or (np.sum(ph) == 7) or (np.sum(ph) == 8)) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 9) and (dh[0] == 2 or dh[0] == 6 or dh[0] == 7 or dh[0] == 8 \\\n",
    "                or dh[0] == 9 or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 9) and (dh[0] == 3 or dh[0] == 4 or dh[0] == 5) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "                elif ((np.sum(ph) == 10) and ((dh[0] >= 2) and (dh[0] <= 9)) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "                \n",
    "                elif ((np.sum(ph) == 10) and ((dh[0] == 10) or (dh[0] == 11)) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])      \n",
    "                    cards_dealt.append(deck[0])        \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 11) and ((dh[0] >= 2) and (dh[0] <= 10)) and (len(deck) > 1)):\n",
    "\n",
    "                   # print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "                elif ((np.sum(ph) == 11) and (dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])    \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 12) and (((dh[0] == 2) or (dh[0] == 3)) \n",
    "                                              or ((dh[0] >= 7) and (dh[0] <= 11))) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])       \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif (((np.sum(ph) == 13) or (np.sum(ph) == 14) or (np.sum(ph) == 15) \n",
    "                      or (np.sum(ph) == 16)) and ((dh[0] >= 2) and (dh[0] <= 6))):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "                elif (((np.sum(ph) == 13) or (np.sum(ph) == 14) or (np.sum(ph) == 15) \n",
    "                      or (np.sum(ph) == 16)) and ((dh[0] >= 7) and (dh[0] <= 11)) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif (((ph[0] == 2 and ph[1] == 2) or (ph[0] == 3 and ph[1] == 3)) \\\n",
    "                and (dh[0] == 8 or dh[0] == 9 or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph[0] == 4 and ph[1] == 4) and (dh[0] == 2 or dh[0] == 3 or dh[0] == 4 \\\n",
    "                                                     or dh[0] == 7 or dh[0] == 8 or dh[0] == 9 \\\n",
    "                                                      or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "\n",
    "                elif ((ph[0] == 5 and ph[1] == 5) and (dh[0] == 2 or dh[0] == 3 or dh[0] == 4 \\\n",
    "                                                      or dh[0] == 5 or dh[0] == 6 or dh[0] == 7 \\\n",
    "                                                      or dh[0] == 8 or dh[0] == 9) and (len(deck) > 1)):\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "                elif ((ph[0] == 5 and ph[1] == 5) and (dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "\n",
    "                elif ((ph[0] == 6 and ph[1] == 6) and (dh[0] == 7 or dh[0] == 8 or dh[0] == 9 \\\n",
    "                                                      or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "\n",
    "\n",
    "                elif ((ph[0] == 7 and ph[1] == 7) and (dh[0] == 8 or dh[0] == 9 or dh[0] == 10 \\\n",
    "                                                      or dh[0] == 11) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])      \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph[0] == 9 and ph[1] == 9) and (dh[0] == 7 or dh[0] == 10 or dh[0] == 11)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "                elif ((ph[0] == 10 and ph[1] == 10)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "\n",
    "                elif ((((ph[0] == 11) and (ph[1] == 2)) or ((ph[0] == 2) and (ph[1] == 11))\n",
    "                      or ((ph[0] == 11) and (ph[1] == 3)) or ((ph[0] == 3) and (ph[1] == 11))) \\\n",
    "                and ((dh[0] == 2) or (dh[0] == 3) or (dh[0] == 4) or (dh[0] == 7) or (dh[0] == 8) \\\n",
    "                     or (dh[0] == 9) or (dh[0] == 10) or (dh[0] == 11)) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 2) or (ph[0] == 2 and ph[1] == 11)\n",
    "                      or (ph[0] == 11 and ph[1] == 3) or (ph[0] == 3 and ph[1] == 11) \\\n",
    "                and (dh[0] == 5 or dh[0] == 6) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 4) or (ph[0] == 4 and ph[1] == 11) \n",
    "                      or (ph[0] == 11 and ph[1] == 5) and (dh[0] == 2 or dh[0] == 3 \n",
    "                                                           or dh[0] == 7 or dh[0] == 8 \n",
    "                                                           or dh[0] == 9 or dh[0] == 10 \n",
    "                                                           or dh[0] == 11) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif (((ph[0] == 11 and ph[1] == 4) or (ph[0] == 4 and ph[1] == 11) \n",
    "                      or (ph[0] == 11 and ph[1] == 5) \n",
    "                      or (ph[0] == 5 and ph[1] == 11)) and (dh[0] == 4 or dh[0] == 5 \n",
    "                                                            or dh[0] == 6) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 6) or (ph[0] == 6 and ph[1] == 11) \n",
    "                      and (dh[0] == 2 or dh[0] == 7 or dh[0] == 8 or dh[0] == 9 or dh[0] == 10 \n",
    "                           or dh[0] == 11) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])       \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 6) or (ph[0] == 6 and ph[1] == 11) \n",
    "                      or (ph[0] == 11 and ph[1] == 7) or (ph[0] == 7 and ph[1] == 11) \\\n",
    "                      and (dh[0] == 3 or dh[0] == 4 or dh[0] == 5 or dh[0] == 6) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 7) or (ph[0] == 7 and ph[1] == 11) \\\n",
    "                      and (dh[0] == 2 or dh[0] == 7 or dh[0] == 8)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 7) or (ph[0] == 7 and ph[1] == 11) \\\n",
    "                      and (dh[0] == 9 or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])        \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph[0] == 11 and (ph[1] == 8 or ph[1] == 9 or ph[1] == 10)) \n",
    "                      or ((ph[0] == 8 or ph[1] == 9 or ph[1] == 10) and ph[1] == 11)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, bet\n",
    "                    \n",
    "                else:\n",
    "                    return dh, ph, ph2, cards_dealt, bet  \n",
    "        else:\n",
    "            pass\n",
    "        \n",
    "    return dh, ph, ph2, cards_dealt, bet\n",
    "\n",
    "# create a function to tell player to hit or stay based on the true count\n",
    "def ill_18(dealers_hand, players_hand, cards_dealt, deck, bet):   \n",
    "   \n",
    "    \"\"\"\n",
    "    Makes blackjack moves based on Hi-LO system and true count (see illustrious 18)\n",
    "    \"\"\"\n",
    "    \n",
    "    trigger = 0\n",
    "    global true_count\n",
    "    ph2 = []\n",
    "\n",
    "\n",
    "    # change variable names for the while loop\n",
    "    ph = players_hand\n",
    "    dh = dealers_hand\n",
    "        \n",
    "    #run the count for the cards in the dealers hand and the players hand\n",
    "    r_count, r_count_list = count_cards(all_cards_dealt) #count at end\n",
    "    \n",
    "    # compute the thrue count\n",
    "    if ((len(deck) != 0.) and ((len(deck) / 52) != 0.)):\n",
    "        # compute the true count (running count / # of decks remaining) so that player can hit or stay\n",
    "        true_count = (r_count / ((len(deck) / 52)))\n",
    "        \n",
    "    else:\n",
    "        pass\n",
    "    \n",
    " \n",
    "    while (((np.sum(ph) <= 17) and (len(deck) > 1) and (trigger == 0))):\n",
    "            if (((ph[0] == 2 and ph[1] == 2) or (ph[0] == 3 and ph[1] == 3)) \\\n",
    "            and ((dh[0] == 2) or (dh[0] == 3) or (dh[0] == 4) or (dh[0] == 5) or (dh[0] == 6) \\\n",
    "                 or (dh[0] == 7)) and (len(deck) > 1)):\n",
    "\n",
    "\n",
    "                # split the hand into two seperate hands \n",
    "                ph2 = []\n",
    "\n",
    "                ph2.append(ph[0])\n",
    "                ph.remove(ph[0])\n",
    "                ph.append(deck[0])\n",
    "                cards_dealt.append(deck[0])\n",
    "                deck.remove(deck[0])\n",
    "                ph2.append(deck[0])\n",
    "                cards_dealt.append(deck[0])\n",
    "                deck.remove(deck[0])\n",
    "\n",
    "                trigger = 1\n",
    "\n",
    "            elif (ph[0] == 4 and ph[1] == 4) and (dh[0] == 5 or dh[0] == 6) and (len(deck) > 1):\n",
    "\n",
    "\n",
    "                # split the hand into two seperate hands \n",
    "                ph2 = []\n",
    "\n",
    "                ph2.append(ph[0])\n",
    "                ph.remove(ph[0])\n",
    "                ph.append(deck[0])\n",
    "                cards_dealt.append(deck[0])\n",
    "                deck.remove(deck[0])\n",
    "                ph2.append(deck[0])\n",
    "                cards_dealt.append(deck[0])\n",
    "                deck.remove(deck[0])\n",
    "\n",
    "                trigger = 1\n",
    "\n",
    "\n",
    "            elif ((ph[0] == 6 and ph[1] == 6) and (dh[0] == 2 or dh[0] == 3 or dh[0] == 4 \\\n",
    "                                                  or dh[0] == 5 or dh[0] == 6) and (len(deck) > 1)):\n",
    "\n",
    "                # split the hand into two seperate hands \n",
    "                ph2 = []\n",
    "\n",
    "                ph2.append(ph[0])\n",
    "                ph.remove(ph[0])\n",
    "                ph.append(deck[0])\n",
    "                cards_dealt.append(deck[0])\n",
    "                deck.remove(deck[0])\n",
    "                ph2.append(deck[0])\n",
    "                cards_dealt.append(deck[0])\n",
    "                deck.remove(deck[0])\n",
    "\n",
    "                trigger = 1\n",
    "\n",
    "\n",
    "            elif ((ph[0] == 7 and ph[1] == 7) and (dh[0] == 2 or dh[0] == 3 or dh[0] == 4 \\\n",
    "                                                  or dh[0] == 5 or dh[0] == 6 or dh[0] == 7) and (len(deck) > 1)):\n",
    "                # split the hand into two seperate hands \n",
    "                ph2 = []\n",
    "\n",
    "                ph2.append(ph[0])\n",
    "                ph.remove(ph[0])\n",
    "                ph.append(deck[0])\n",
    "                cards_dealt.append(deck[0])\n",
    "                deck.remove(deck[0])\n",
    "                ph2.append(deck[0])\n",
    "                cards_dealt.append(deck[0])\n",
    "                deck.remove(deck[0])\n",
    "\n",
    "                trigger = 1\n",
    "\n",
    "\n",
    "            elif ((ph[0] == 8 and ph[1] == 8) and (len(deck) > 1)):\n",
    "\n",
    "                # split the hand into two seperate hands \n",
    "                ph2 = []\n",
    "\n",
    "                ph2.append(ph[0])\n",
    "                ph.remove(ph[0])\n",
    "                ph.append(deck[0])\n",
    "                cards_dealt.append(deck[0])\n",
    "                deck.remove(deck[0])\n",
    "                ph2.append(deck[0])\n",
    "                cards_dealt.append(deck[0])\n",
    "                deck.remove(deck[0])\n",
    "\n",
    "                trigger = 1\n",
    "\n",
    "\n",
    "            elif ((ph[0] == 9 and ph[1] == 9) and ((dh[0] == 2 or dh[0] == 3 or dh[0] == 4 \\\n",
    "                                                  or dh[0] == 5 or dh[0] == 6 or dh[0] == 8 \\\n",
    "                                                  or dh[0] == 9)) and (len(deck) > 1)):\n",
    "\n",
    "                # split the hand into two seperate hands \n",
    "                ph2 = []\n",
    "\n",
    "                ph2.append(ph[0])\n",
    "                ph.remove(ph[0])\n",
    "                ph.append(deck[0])\n",
    "                cards_dealt.append(deck[0])\n",
    "                deck.remove(deck[0])\n",
    "                ph2.append(deck[0])\n",
    "                cards_dealt.append(deck[0])\n",
    "                deck.remove(deck[0])\n",
    "\n",
    "                trigger = 1\n",
    "\n",
    "            elif (ph[0] == 11 and ph[1] == 11 and (len(deck) > 1)):\n",
    "\n",
    "                # split the hand into two seperate hands \n",
    "                ph2 = []\n",
    "\n",
    "                ph2.append(ph[0])\n",
    "                ph.remove(ph[0])\n",
    "                ph.append(deck[0])\n",
    "                cards_dealt.append(deck[0])\n",
    "                deck.remove(deck[0])\n",
    "                ph2.append(deck[0])\n",
    "                cards_dealt.append(deck[0])\n",
    "                deck.remove(deck[0])\n",
    "\n",
    "                trigger = 1\n",
    "                \n",
    "            else:\n",
    "                return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "            \n",
    "        \n",
    "    if ((len(ph2) > 0) and (len(deck) > 1)):\n",
    "            \n",
    "            while ((np.sum(ph2) <= 17) and (len(deck) >= 1)):\n",
    "                \n",
    "                if ((np.sum(ph2) == 9) and (dh[0] == 2) and (true_count < 1) and (len(deck) > 1)):\n",
    "                    ph2.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph2) == 9) and (dh[0] == 7) and (true_count < 3) and (len(deck) > 1)):\n",
    "                    ph2.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "    \n",
    "                elif ((np.sum(ph2) == 10) and (dh[0] == 10) and (true_count < 4) and (len(deck) > 1)):\n",
    "                    ph2.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph2) == 10) and (dh[0] == 11) and (true_count < 4) and (len(deck) > 1)):\n",
    "                    ph2.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "    \n",
    "                elif ((np.sum(ph2) == 11) and (dh[0] == 11) and (true_count < 1) and (len(deck) > 1)):\n",
    "                    ph2.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph2) == 12) and (dh[0] == 6) and (true_count < -1) and (len(deck) > 1)):\n",
    "                    ph2.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph2) == 12) and (dh[0] == 5) and (true_count < -2) and (len(deck) > 1)):\n",
    "                    ph2.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph2) == 12) and (dh[0] == 4) and (true_count < 0) and (len(deck) > 1)):\n",
    "                    ph2.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph2) == 12) and (dh[0] == 3) and (true_count < 2) and (len(deck) > 1)):\n",
    "                    ph2.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph2) == 12) and (dh[0] == 2) and (true_count < 3) and (len(deck) > 1)):\n",
    "                    ph2.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "                    \n",
    "                    \n",
    "                elif ((np.sum(ph2) == 13) and (dh[0] == 2) and (true_count < -1) and (len(deck) > 1)):\n",
    "                    ph2.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph2) == 13) and (dh[0] == 3) and (true_count < -2) and (len(deck) > 1)):\n",
    "                    ph2.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "                    \n",
    "                elif ((np.sum(ph2) == 15) and (dh[0] == 10) and (true_count < 4) and (len(deck) > 1)):\n",
    "                    ph2.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph2) == 16) and (dh[0] == 10) and (true_count < 0) and (len(deck) > 1)):\n",
    "                    ph2.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph2) == 16) and (dh[0] == 9) and (true_count < 5) and (len(deck) > 1)):\n",
    "                    ph2.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "    \n",
    "    \n",
    "                elif (((ph2[0] == 10) and (ph2[1] == 10) and (dh[0] == 5) and (true_count < 5)) and (len(deck) > 1)):\n",
    "                        ph2.append(deck[0])        \n",
    "                        cards_dealt.append(deck[0])         \n",
    "                        deck.remove(deck[0])\n",
    "                        continue\n",
    "\n",
    "                elif (((ph2[0] == 10) and (ph2[1] == 10) and (dh[0] == 6) and (true_count < 4)) and (len(deck) > 1)):\n",
    "                        ph2.append(deck[0])        \n",
    "                        cards_dealt.append(deck[0])         \n",
    "                        deck.remove(deck[0])\n",
    "                        continue\n",
    "                        \n",
    "                elif ((np.sum(ph2) == 5) or (np.sum(ph2) == 6) \\\n",
    "                or (np.sum(ph2) == 7) or (np.sum(ph2) == 8) and (len(deck) > 1)):\n",
    "\n",
    "                    ph2.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph2) == 9) and (dh[0] == 2 or dh[0] == 6 or dh[0] == 7 or dh[0] == 8\n",
    "                                            or dh[0] == 9 or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph2.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph2) == 9) and (dh[0] == 3 or dh[0] == 4 or dh[0] == 5) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph2.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((np.sum(ph2) == 10) and ((dh[0] >= 2) and (dh[0] <= 9)) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph2.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((np.sum(ph2) == 10) and ((dh[0] == 10) or (dh[0] == 11)) and (len(deck) > 1)):\n",
    "\n",
    "                    ph2.append(deck[0])      \n",
    "                    cards_dealt.append(deck[0])        \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph2) == 11) and ((dh[0] >= 2) and (dh[0] <= 10)) and (len(deck) > 1)):\n",
    "\n",
    "                   # print('double')\n",
    "                    ph2.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((np.sum(ph2) == 11) and (dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph2.append(deck[0])    \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph2) == 12) and (((dh[0] == 2) or (dh[0] == 3)) \n",
    "                                              or ((dh[0] >= 7) and (dh[0] <= 11))) and (len(deck) > 1)):\n",
    "\n",
    "                    ph2.append(deck[0])       \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif (((np.sum(ph2) == 13) or (np.sum(ph2) == 14) or (np.sum(ph2) == 15) \n",
    "                      or (np.sum(ph2) == 16)) and ((dh[0] >= 2) and (dh[0] <= 6)) and (len(deck) > 1)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif (((np.sum(ph2) == 13) or (np.sum(ph2) == 14) or (np.sum(ph2) == 15) \n",
    "                      or (np.sum(ph2) == 16)) and ((dh[0] >= 7) and (dh[0] <= 11)) and (len(deck) > 1)):\n",
    "\n",
    "                    ph2.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif (((ph2[0] == 2 and ph2[1] == 2) or (ph2[0] == 3 and ph2[1] == 3)) \\\n",
    "                and (dh[0] == 8 or dh[0] == 9 or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph2.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph2[0] == 4 and ph2[1] == 4) and (dh[0] == 2 or dh[0] == 3 or dh[0] == 4 \\\n",
    "                                                     or dh[0] == 7 or dh[0] == 8 or dh[0] == 9 \\\n",
    "                                                      or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph2.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "\n",
    "                elif ((ph2[0] == 5 and ph2[1] == 5) and (dh[0] == 2 or dh[0] == 3 or dh[0] == 4 \\\n",
    "                                                      or dh[0] == 5 or dh[0] == 6 or dh[0] == 7 \\\n",
    "                                                      or dh[0] == 8 or dh[0] == 9) and (len(deck) > 1)):\n",
    "                    #print('double')\n",
    "                    ph2.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((ph2[0] == 5 and ph2[1] == 5) and (dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph2.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "\n",
    "                elif ((ph2[0] == 6 and ph2[1] == 6) and (dh[0] == 7 or dh[0] == 8 or dh[0] == 9 \\\n",
    "                                                      or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph2.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "\n",
    "\n",
    "                elif ((ph2[0] == 7 and ph2[1] == 7) and (dh[0] == 8 or dh[0] == 9 or dh[0] == 10 \\\n",
    "                                                      or dh[0] == 11) and (len(deck) > 1)):\n",
    "                    ph2.append(deck[0])      \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph2[0] == 9 and ph2[1] == 9) and (dh[0] == 7 or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((ph2[0] == 10 and ph2[1] == 10)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "\n",
    "                elif ((((ph2[0] == 11) and (ph2[1] == 2)) or ((ph2[0] == 2) and (ph2[1] == 11))\n",
    "                      or ((ph2[0] == 11) and (ph2[1] == 3)) or ((ph2[0] == 3) and (ph2[1] == 11))) \\\n",
    "                and ((dh[0] == 2) or (dh[0] == 3) or (dh[0] == 4) or (dh[0] == 7) or (dh[0] == 8) \\\n",
    "                     or (dh[0] == 9) or (dh[0] == 10) or (dh[0] == 11)) and (len(deck) > 1)):\n",
    "\n",
    "                    ph2.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph2[0] == 11 and ph2[1] == 2) or (ph2[0] == 2 and ph2[1] == 11)\n",
    "                      or (ph2[0] == 11 and ph2[1] == 3) or (ph2[0] == 3 and ph2[1] == 11) \\\n",
    "                and (dh[0] == 5 or dh[0] == 6) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph2.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((ph2[0] == 11 and ph2[1] == 4) or (ph2[0] == 4 and ph2[1] == 11) \n",
    "                      or (ph2[0] == 11 and ph2[1] == 5) and (dh[0] == 2 or dh[0] == 3 \n",
    "                                                           or dh[0] == 7 or dh[0] == 8 \n",
    "                                                           or dh[0] == 9 or dh[0] == 10 \n",
    "                                                           or dh[0] == 11) and (len(deck) > 1)):\n",
    "                    ph2.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif (((ph2[0] == 11 and ph2[1] == 4) or (ph2[0] == 4 and ph2[1] == 11) \n",
    "                      or (ph2[0] == 11 and ph2[1] == 5) \n",
    "                      or (ph2[0] == 5 and ph2[1] == 11)) and (dh[0] == 4 or dh[0] == 5 \n",
    "                                                            or dh[0] == 6) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph2.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((ph2[0] == 11 and ph2[1] == 6) or (ph2[0] == 6 and ph2[1] == 11) \n",
    "                      and (dh[0] == 2 or dh[0] == 7 or dh[0] == 8 or dh[0] == 9 or dh[0] == 10 \n",
    "                           or dh[0] == 11) and (len(deck) > 1)):\n",
    "                    ph2.append(deck[0])       \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph2[0] == 11 and ph2[1] == 6) or (ph2[0] == 6 and ph2[1] == 11) \n",
    "                      or (ph2[0] == 11 and ph2[1] == 7) or (ph2[0] == 7 and ph2[1] == 11) \\\n",
    "                      and (dh[0] == 3 or dh[0] == 4 or dh[0] == 5 or dh[0] == 6) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph2.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((ph2[0] == 11 and ph2[1] == 7) or (ph2[0] == 7 and ph2[1] == 11) \\\n",
    "                      and (dh[0] == 2 or dh[0] == 7 or dh[0] == 8) and (len(deck) > 1)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((ph2[0] == 11 and ph2[1] == 7) or (ph2[0] == 7 and ph2[1] == 11) \\\n",
    "                      and (dh[0] == 9 or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph2.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])        \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph2[0] == 11 and (ph2[1] == 8 or ph2[1] == 9 or ph2[1] == 10)) \n",
    "                      or ((ph2[0] == 8 or ph2[1] == 9 or ph2[1] == 10) and ph2[1] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "                    \n",
    "                else:\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet \n",
    "\n",
    "            while ((np.sum(ph) <= 17) and (len(deck) > 1)):\n",
    "                \n",
    "                if ((np.sum(ph) == 9) and (dh[0] == 2) and (true_count < 1) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 9) and (dh[0] == 7) and (true_count < 3) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "    \n",
    "                elif ((np.sum(ph) == 10) and (dh[0] == 10) and (true_count < 4) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 10) and (dh[0] == 11) and (true_count < 4) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "    \n",
    "                elif ((np.sum(ph) == 11) and (dh[0] == 11) and (true_count < 1) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 12) and (dh[0] == 6) and (true_count < -1) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 12) and (dh[0] == 5) and (true_count < -2) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 12) and (dh[0] == 4) and (true_count < 0) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 12) and (dh[0] == 3) and (true_count < 2) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 12) and (dh[0] == 2) and (true_count < 3) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "                    \n",
    "                    \n",
    "                elif ((np.sum(ph) == 13) and (dh[0] == 2) and (true_count < -1) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 13) and (dh[0] == 3) and (true_count < -2) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "                    \n",
    "                elif ((np.sum(ph) == 15) and (dh[0] == 10) and (true_count < 4) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 16) and (dh[0] == 10) and (true_count < 0) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 16) and (dh[0] == 9) and (true_count < 5) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "    \n",
    "    \n",
    "                elif (((ph[0] == 10) and (ph[1] == 10) and (dh[0] == 5) and (true_count < 5)) and (len(deck) > 1)):\n",
    "                        ph.append(deck[0])        \n",
    "                        cards_dealt.append(deck[0])         \n",
    "                        deck.remove(deck[0])\n",
    "                        continue\n",
    "\n",
    "                elif (((ph[0] == 10) and (ph[1] == 10) and (dh[0] == 6) and (true_count < 4)) and (len(deck) > 1)):\n",
    "                        ph.append(deck[0])        \n",
    "                        cards_dealt.append(deck[0])         \n",
    "                        deck.remove(deck[0])\n",
    "                        continue\n",
    "                        \n",
    "                elif ((np.sum(ph) == 5) or (np.sum(ph) == 6) \\\n",
    "                or (np.sum(ph) == 7) or (np.sum(ph) == 8) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 9) and (dh[0] == 2 or dh[0] == 6 or dh[0] == 7 or dh[0] == 8\n",
    "                                            or dh[0] == 9 or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 9) and (dh[0] == 3 or dh[0] == 4 or dh[0] == 5) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((np.sum(ph) == 10) and ((dh[0] >= 2) and (dh[0] <= 9)) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((np.sum(ph) == 10) and ((dh[0] == 10) or (dh[0] == 11)) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])      \n",
    "                    cards_dealt.append(deck[0])        \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 11) and ((dh[0] >= 2) and (dh[0] <= 10)) and (len(deck) > 1)):\n",
    "\n",
    "                   # print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((np.sum(ph) == 11) and (dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])    \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 12) and (((dh[0] == 2) or (dh[0] == 3)) \n",
    "                                              or ((dh[0] >= 7) and (dh[0] <= 11))) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])       \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif (((np.sum(ph) == 13) or (np.sum(ph) == 14) or (np.sum(ph) == 15) \n",
    "                      or (np.sum(ph) == 16)) and ((dh[0] >= 2) and (dh[0] <= 6)) and (len(deck) > 1)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif (((np.sum(ph) == 13) or (np.sum(ph) == 14) or (np.sum(ph) == 15) \n",
    "                      or (np.sum(ph) == 16)) and ((dh[0] >= 7) and (dh[0] <= 11)) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif (((ph[0] == 2 and ph[1] == 2) or (ph[0] == 3 and ph[1] == 3)) \\\n",
    "                and (dh[0] == 8 or dh[0] == 9 or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph[0] == 4 and ph[1] == 4) and (dh[0] == 2 or dh[0] == 3 or dh[0] == 4 \\\n",
    "                                                     or dh[0] == 7 or dh[0] == 8 or dh[0] == 9 \\\n",
    "                                                      or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "\n",
    "                elif ((ph[0] == 5 and ph[1] == 5) and (dh[0] == 2 or dh[0] == 3 or dh[0] == 4 \\\n",
    "                                                      or dh[0] == 5 or dh[0] == 6 or dh[0] == 7 \\\n",
    "                                                      or dh[0] == 8 or dh[0] == 9) and (len(deck) > 1)):\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((ph[0] == 5 and ph[1] == 5) and (dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "\n",
    "                elif ((ph[0] == 6 and ph[1] == 6) and (dh[0] == 7 or dh[0] == 8 or dh[0] == 9 \\\n",
    "                                                      or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "\n",
    "\n",
    "                elif ((ph[0] == 7 and ph[1] == 7) and (dh[0] == 8 or dh[0] == 9 or dh[0] == 10 \\\n",
    "                                                      or dh[0] == 11) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])      \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph[0] == 9 and ph[1] == 9) and (dh[0] == 7 or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((ph[0] == 10 and ph[1] == 10)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "\n",
    "                elif ((((ph[0] == 11) and (ph[1] == 2)) or ((ph[0] == 2) and (ph[1] == 11))\n",
    "                      or ((ph[0] == 11) and (ph[1] == 3)) or ((ph[0] == 3) and (ph[1] == 11))) \\\n",
    "                and ((dh[0] == 2) or (dh[0] == 3) or (dh[0] == 4) or (dh[0] == 7) or (dh[0] == 8) \\\n",
    "                     or (dh[0] == 9) or (dh[0] == 10) or (dh[0] == 11)) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 2) or (ph[0] == 2 and ph[1] == 11)\n",
    "                      or (ph[0] == 11 and ph[1] == 3) or (ph[0] == 3 and ph[1] == 11) \\\n",
    "                and (dh[0] == 5 or dh[0] == 6) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 4) or (ph[0] == 4 and ph[1] == 11) \n",
    "                      or (ph[0] == 11 and ph[1] == 5) and (dh[0] == 2 or dh[0] == 3 \n",
    "                                                           or dh[0] == 7 or dh[0] == 8 \n",
    "                                                           or dh[0] == 9 or dh[0] == 10 \n",
    "                                                           or dh[0] == 11) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif (((ph[0] == 11 and ph[1] == 4) or (ph[0] == 4 and ph[1] == 11) \n",
    "                      or (ph[0] == 11 and ph[1] == 5) \n",
    "                      or (ph[0] == 5 and ph[1] == 11)) and (dh[0] == 4 or dh[0] == 5 \n",
    "                                                            or dh[0] == 6) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 6) or (ph[0] == 6 and ph[1] == 11) \n",
    "                      and (dh[0] == 2 or dh[0] == 7 or dh[0] == 8 or dh[0] == 9 or dh[0] == 10 \n",
    "                           or dh[0] == 11) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])       \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 6) or (ph[0] == 6 and ph[1] == 11) \n",
    "                      or (ph[0] == 11 and ph[1] == 7) or (ph[0] == 7 and ph[1] == 11) \\\n",
    "                      and (dh[0] == 3 or dh[0] == 4 or dh[0] == 5 or dh[0] == 6) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 7) or (ph[0] == 7 and ph[1] == 11) \\\n",
    "                      and (dh[0] == 2 or dh[0] == 7 or dh[0] == 8) and (len(deck) > 1)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 7) or (ph[0] == 7 and ph[1] == 11) \\\n",
    "                      and (dh[0] == 9 or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])        \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph[0] == 11 and (ph[1] == 8 or ph[1] == 9 or ph[1] == 10)) \n",
    "                      or ((ph[0] == 8 or ph[1] == 9 or ph[1] == 10) and ph[1] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "                    \n",
    "                else:\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "                \n",
    "    elif ((len(ph2) == 0) and (len(deck) > 1)):\n",
    "            while ((np.sum(ph) <= 17) and (len(deck) > 1)):\n",
    "                if ((np.sum(ph) == 9) and (dh[0] == 2) and (true_count < 1) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 9) and (dh[0] == 7) and (true_count < 3) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "    \n",
    "                elif ((np.sum(ph) == 10) and (dh[0] == 10) and (true_count < 4) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 10) and (dh[0] == 11) and (true_count < 4) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "    \n",
    "                elif ((np.sum(ph) == 11) and (dh[0] == 11) and (true_count < 1) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 12) and (dh[0] == 6) and (true_count < -1) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 12) and (dh[0] == 5) and (true_count < -2) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 12) and (dh[0] == 4) and (true_count < 0) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 12) and (dh[0] == 3) and (true_count < 2) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 12) and (dh[0] == 2) and (true_count < 3) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "                    \n",
    "                    \n",
    "                elif ((np.sum(ph) == 13) and (dh[0] == 2) and (true_count < -1) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 13) and (dh[0] == 3) and (true_count < -2) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "                    \n",
    "                elif ((np.sum(ph) == 15) and (dh[0] == 10) and (true_count < 4) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 16) and (dh[0] == 10) and (true_count < 0) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 16) and (dh[0] == 9) and (true_count < 5) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "    \n",
    "    \n",
    "                elif (((ph[0] == 10) and (ph[1] == 10) and (dh[0] == 5) and (true_count < 5)) and (len(deck) > 1)):\n",
    "                        ph.append(deck[0])        \n",
    "                        cards_dealt.append(deck[0])         \n",
    "                        deck.remove(deck[0])\n",
    "                        continue\n",
    "\n",
    "                elif (((ph[0] == 10) and (ph[1] == 10) and (dh[0] == 6) and (true_count < 4)) and (len(deck) > 1)):\n",
    "                        ph.append(deck[0])        \n",
    "                        cards_dealt.append(deck[0])         \n",
    "                        deck.remove(deck[0])\n",
    "                        continue\n",
    "                        \n",
    "                elif ((np.sum(ph) == 5) or (np.sum(ph) == 6) \\\n",
    "                or (np.sum(ph) == 7) or (np.sum(ph) == 8) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 9) and (dh[0] == 2 or dh[0] == 6 or dh[0] == 7 or dh[0] == 8\n",
    "                                            or dh[0] == 9 or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 9) and (dh[0] == 3 or dh[0] == 4 or dh[0] == 5) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((np.sum(ph) == 10) and ((dh[0] >= 2) and (dh[0] <= 9)) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((np.sum(ph) == 10) and ((dh[0] == 10) or (dh[0] == 11)) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])      \n",
    "                    cards_dealt.append(deck[0])        \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 11) and ((dh[0] >= 2) and (dh[0] <= 10)) and (len(deck) > 1)):\n",
    "\n",
    "                   # print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((np.sum(ph) == 11) and (dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])    \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((np.sum(ph) == 12) and (((dh[0] == 2) or (dh[0] == 3)) \n",
    "                                              or ((dh[0] >= 7) and (dh[0] <= 11))) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])       \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif (((np.sum(ph) == 13) or (np.sum(ph) == 14) or (np.sum(ph) == 15) \n",
    "                      or (np.sum(ph) == 16)) and ((dh[0] >= 2) and (dh[0] <= 6)) and (len(deck) > 1)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif (((np.sum(ph) == 13) or (np.sum(ph) == 14) or (np.sum(ph) == 15) \n",
    "                      or (np.sum(ph) == 16)) and ((dh[0] >= 7) and (dh[0] <= 11)) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0])\n",
    "                    continue\n",
    "\n",
    "                elif (((ph[0] == 2 and ph[1] == 2) or (ph[0] == 3 and ph[1] == 3)) \\\n",
    "                and (dh[0] == 8 or dh[0] == 9 or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph[0] == 4 and ph[1] == 4) and (dh[0] == 2 or dh[0] == 3 or dh[0] == 4 \\\n",
    "                                                     or dh[0] == 7 or dh[0] == 8 or dh[0] == 9 \\\n",
    "                                                      or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "\n",
    "                elif ((ph[0] == 5 and ph[1] == 5) and (dh[0] == 2 or dh[0] == 3 or dh[0] == 4 \\\n",
    "                                                      or dh[0] == 5 or dh[0] == 6 or dh[0] == 7 \\\n",
    "                                                      or dh[0] == 8 or dh[0] == 9) and (len(deck) > 1)):\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((ph[0] == 5 and ph[1] == 5) and (dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "\n",
    "                elif ((ph[0] == 6 and ph[1] == 6) and (dh[0] == 7 or dh[0] == 8 or dh[0] == 9 \\\n",
    "                                                      or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "\n",
    "\n",
    "                elif ((ph[0] == 7 and ph[1] == 7) and (dh[0] == 8 or dh[0] == 9 or dh[0] == 10 \\\n",
    "                                                      or dh[0] == 11) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])      \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph[0] == 9 and ph[1] == 9) and (dh[0] == 7 or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((ph[0] == 10 and ph[1] == 10)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "\n",
    "                elif ((((ph[0] == 11) and (ph[1] == 2)) or ((ph[0] == 2) and (ph[1] == 11))\n",
    "                      or ((ph[0] == 11) and (ph[1] == 3)) or ((ph[0] == 3) and (ph[1] == 11))) \\\n",
    "                and ((dh[0] == 2) or (dh[0] == 3) or (dh[0] == 4) or (dh[0] == 7) or (dh[0] == 8) \\\n",
    "                     or (dh[0] == 9) or (dh[0] == 10) or (dh[0] == 11)) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 2) or (ph[0] == 2 and ph[1] == 11)\n",
    "                      or (ph[0] == 11 and ph[1] == 3) or (ph[0] == 3 and ph[1] == 11) \\\n",
    "                and (dh[0] == 5 or dh[0] == 6) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 4) or (ph[0] == 4 and ph[1] == 11) \n",
    "                      or (ph[0] == 11 and ph[1] == 5) and (dh[0] == 2 or dh[0] == 3 \n",
    "                                                           or dh[0] == 7 or dh[0] == 8 \n",
    "                                                           or dh[0] == 9 or dh[0] == 10 \n",
    "                                                           or dh[0] == 11) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])        \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif (((ph[0] == 11 and ph[1] == 4) or (ph[0] == 4 and ph[1] == 11) \n",
    "                      or (ph[0] == 11 and ph[1] == 5) \n",
    "                      or (ph[0] == 5 and ph[1] == 11)) and (dh[0] == 4 or dh[0] == 5 \n",
    "                                                            or dh[0] == 6) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 6) or (ph[0] == 6 and ph[1] == 11) \n",
    "                      and (dh[0] == 2 or dh[0] == 7 or dh[0] == 8 or dh[0] == 9 or dh[0] == 10 \n",
    "                           or dh[0] == 11) and (len(deck) > 1)):\n",
    "                    ph.append(deck[0])       \n",
    "                    cards_dealt.append(deck[0])         \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 6) or (ph[0] == 6 and ph[1] == 11) \n",
    "                      or (ph[0] == 11 and ph[1] == 7) or (ph[0] == 7 and ph[1] == 11) \\\n",
    "                      and (dh[0] == 3 or dh[0] == 4 or dh[0] == 5 or dh[0] == 6) and (len(deck) > 1)):\n",
    "\n",
    "                    #print('double')\n",
    "                    ph.append(deck[0])\n",
    "                    cards_dealt.append(deck[0])\n",
    "                    deck.remove(deck[0]) \n",
    "                    bet = (bet * 2)\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 7) or (ph[0] == 7 and ph[1] == 11) \\\n",
    "                      and (dh[0] == 2 or dh[0] == 7 or dh[0] == 8) and (len(deck) > 1)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "                elif ((ph[0] == 11 and ph[1] == 7) or (ph[0] == 7 and ph[1] == 11) \\\n",
    "                      and (dh[0] == 9 or dh[0] == 10 or dh[0] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    ph.append(deck[0])         \n",
    "                    cards_dealt.append(deck[0])        \n",
    "                    deck.remove(deck[0]) \n",
    "                    continue\n",
    "\n",
    "                elif ((ph[0] == 11 and (ph[1] == 8 or ph[1] == 9 or ph[1] == 10)) \n",
    "                      or ((ph[0] == 8 or ph[1] == 9 or ph[1] == 10) and ph[1] == 11) and (len(deck) > 1)):\n",
    "\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "                    \n",
    "                else:\n",
    "                    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet            \n",
    "    else:\n",
    "        pass\n",
    "            \n",
    "    while ((np.sum(dh) <= 17) and (len(deck) >= 1)):\n",
    "        dh.append(deck[0])         \n",
    "        cards_dealt.append(deck[0])         \n",
    "        deck.remove(deck[0]) \n",
    "            \n",
    "    #run the count for the cards in the dealers hand and the players hand\n",
    "    r_count, r_count_list = count_cards(all_cards_dealt) #count at end\n",
    "    \n",
    "    if (len(deck) != 0.):\n",
    "        # compute the true count (running count / # of decks remaining) so that player can hit or stay\n",
    "        true_count = (r_count / ((len(deck) / 52)))\n",
    "        \n",
    "    else:\n",
    "        pass\n",
    "    \n",
    "    return dh, ph, ph2, cards_dealt, r_count_list, true_count, bet\n",
    "\n",
    "# create a function to generate N decks\n",
    "def n_decks(n):\n",
    "    \"\"\"Generates n decks, shuffled\"\"\"\n",
    "    \n",
    "    #create a single deck of cards\n",
    "    one_suit = list(np.arange(2,11))\n",
    "\n",
    "    # create face cards and an ace and add them to the deck\n",
    "    J = 10\n",
    "    K = 10\n",
    "    Q = 10\n",
    "    A = 11\n",
    "    one_suit.append(J)\n",
    "    one_suit.append(K)\n",
    "    one_suit.append(Q)\n",
    "    one_suit.append(A)\n",
    "\n",
    "    one_deck = one_suit*4\n",
    "    \n",
    "    # generate n decks\n",
    "    n_decks = one_deck*n\n",
    "    \n",
    "    # shuffle the decks\n",
    "    random.shuffle(n_decks)\n",
    "    \n",
    "    return n_decks\n",
    "\n",
    "\n",
    "# create a function to count cards as the are drawn from the shoe\n",
    "def count_cards(one_deck): \n",
    "    \"\"\"Counts card by card, for N number of decks\"\"\"\n",
    "    \n",
    "    all_counts = [] #an empty list to populate with each cards value\n",
    "    running_count = 0 # the running count at the beggining of the deck\n",
    "\n",
    "    # assign values to each card in the deck\n",
    "    for i in one_deck:\n",
    "        if i <= 6:\n",
    "            one_count = 1\n",
    "        elif i == 7:\n",
    "            one_count = 0\n",
    "        elif i == 8:\n",
    "            one_count = 0\n",
    "        elif i == 9:\n",
    "            one_count = 0\n",
    "        elif i >= 10:\n",
    "            one_count = -1\n",
    "        # populate a list to end up with a list of card values\n",
    "        all_counts.append(one_count)\n",
    "    \n",
    "    running_count_list = [] ## NEED TO DECIDE if I should start the list with a zero\n",
    "    # iterate through the list of all card values and add to the running count one by one\n",
    "    for i in range(len(all_counts)):\n",
    "        running_count += all_counts[i]\n",
    "        running_count_list.append(running_count)\n",
    "    \n",
    "    return running_count, running_count_list\n",
    "\n",
    "def p1_play_blackjack_onetime(one_deck, b):\n",
    "    \n",
    "    \"\"\"\n",
    "    -------------------------------------------------------------------------------\n",
    "    Play a game of blackjack with a dealer and single player\n",
    "    -------------------------------------------------------------------------------\n",
    "    Takes a deck of cards as an input and plays one hand of blackjack with the deck\n",
    "    -------------------------------------------------------------------------------\n",
    "    Returns: The value of the dealers hand, the players hand, who won and the running\n",
    "             count at the end of the match.\n",
    "    -------------------------------------------------------------------------------\n",
    "    \"\"\"\n",
    "    global bet\n",
    "    bet = b\n",
    "    # create two hands: a dealer and player, to deal cards to\n",
    "    dealers_hand = []\n",
    "    players_hand = []\n",
    "    cards_dealt = []\n",
    "    \n",
    "    # deal cards (player then dealer)\n",
    "    for i in range(2):\n",
    "        players_hand.append(one_deck[0])\n",
    "        cards_dealt.append(one_deck[0])\n",
    "        one_deck.remove(one_deck[0])\n",
    "        dealers_hand.append(one_deck[0])\n",
    "        cards_dealt.append(one_deck[0])\n",
    "        one_deck.remove(one_deck[0])\n",
    "\n",
    "    # conditional statements to decide to hit or stay (based on traditional rules)\n",
    "    while ((np.sum(players_hand) <= 17) and (len(one_deck) >= 1)):\n",
    "        players_hand.append(one_deck[0])\n",
    "        cards_dealt.append(one_deck[0])\n",
    "        one_deck.remove(one_deck[0])\n",
    "            \n",
    "    if np.sum(players_hand) >= 17:\n",
    "        players_hand = players_hand   \n",
    "    else:\n",
    "        pass\n",
    "\n",
    "    while ((np.sum(dealers_hand) <= 17) and (len(one_deck) >= 1)):\n",
    "        dealers_hand.append(one_deck[0])\n",
    "        cards_dealt.append(one_deck[0])\n",
    "        one_deck.remove(one_deck[0])\n",
    "            \n",
    "    if np.sum(dealers_hand) >= 17:\n",
    "        dealers_hand = dealers_hand\n",
    "    else:\n",
    "        pass\n",
    "    \n",
    "    #run the count for the cards in the dealers hand and the players hand\n",
    "    r_count, r_count_list = count_cards(cards_dealt) #count at end\n",
    "    \n",
    "    # conserve the hands as lists in seperate variables\n",
    "    dealers_hand_list = dealers_hand\n",
    "    players_hand_list = players_hand\n",
    "    \n",
    "    # convert the list of cards for each hand into an integer\n",
    "    dealers_hand = int(np.sum(dealers_hand_list))\n",
    "    players_hand = int(np.sum(players_hand_list))\n",
    "    \n",
    "    # decide who wins (-1 = dealer win, 0 = push, 1 = player win)\n",
    "    # dealer wins when:\n",
    "    if ((dealers_hand > players_hand) and (dealers_hand <= 21)):\n",
    "        winner = -1.0\n",
    "    elif ((players_hand > 21) and (dealers_hand <= 21)):\n",
    "        winner = -1.0\n",
    "    elif ((players_hand > 21) and (dealers_hand > 21)):\n",
    "        winner =  -1.0  \n",
    "        \n",
    "    #player wins when:\n",
    "    elif ((players_hand > dealers_hand) and (players_hand <= 21)):\n",
    "        winner = 1.0\n",
    "    elif ((dealers_hand > 21) and (players_hand <= 21)):\n",
    "        winner = 1.0\n",
    "    elif ((players_hand == 21) and ((len(players_hand_list)) == 2) and \\\n",
    "          (players_hand != dealers_hand)):\n",
    "        winner = 1.0\n",
    "\n",
    "    # push when:\n",
    "    elif (players_hand == dealers_hand):\n",
    "        winner = 0.0\n",
    "        \n",
    "    money = (bet*winner)\n",
    "        \n",
    "    # final results to return: each hand value (as well as list form) and who won\n",
    "    return dealers_hand_list, players_hand_list, dealers_hand, players_hand, \\\n",
    "            winner, cards_dealt, r_count_list, money\n",
    "    \n",
    "    \n",
    "# create a function to play blackjack with N decks of cards in the shoe\n",
    "def p1_play_blackjack(N, b, table=False):\n",
    "    \"\"\"Plays blackjack with two players to the end of the shoe with N decks\"\"\"\n",
    "    global bet\n",
    "    bet = b\n",
    "    # generate a shoe to play with containing N shuffled decks\n",
    "    shoe = n_decks(N)\n",
    "  \n",
    "    ## were going to need to keep track of a lot of data here (populate), including:\n",
    "    ## all the cards that have been dealt after N games (so we can count them)\n",
    "    ## the hands of the dealer throughout N games (for the print table option)\n",
    "    ## the hands of the player throughout N games (for the print table option)\n",
    "    ## the win loss record\n",
    "    ## the count at the end of each round\n",
    "    ## index list to locate what the running count was at the end of each round\n",
    "    all_cards_dealt = []\n",
    "    dealer_cards = []\n",
    "    player_cards = []\n",
    "    win_loss_record = []\n",
    "    r_count_at_round = []\n",
    "    cards_left = []\n",
    "    index = []\n",
    "    winnings = []\n",
    "    winnings_list = []\n",
    "    \n",
    "    # populate the empty lists seen above with relevant data\n",
    "    while len(shoe) >= 4:\n",
    "        d_h_list, p_h_list, d_h, p_h, win, cards_dealt, r_count_list, money \\\n",
    "        = p1_play_blackjack_onetime(shoe, bet) #unpack the returns from function\n",
    "        \n",
    "        # store the data (carsd dealt, player/dealer hands, wins/losses,the index\n",
    "        all_cards_dealt += cards_dealt\n",
    "        cards_left.append(len(all_cards_dealt))\n",
    "        dealer_cards.append(d_h_list)\n",
    "        player_cards.append(p_h_list)\n",
    "        win_loss_record.append(win)\n",
    "        index.append(len(all_cards_dealt))\n",
    "        winnings.append(money)\n",
    "        winnings_list.append(money)\n",
    "    \n",
    "    # calculate how many cards are left in the shoe (in terms of decks remaining)\n",
    "    cards_left = np.array(cards_left)\n",
    "    cards_left = ((N * 52.) - (cards_left))\n",
    "    decks_left_at_round = (cards_left / 52.)\n",
    "    \n",
    "    \n",
    "    # create an array to index all_cards_dealt after counting them to grab\n",
    "    ## the running count at the end of each round played\n",
    "    index = (np.array(index)) - 1\n",
    "    r_count, r_list = count_cards(all_cards_dealt)\n",
    "    \n",
    "    for i in index:\n",
    "        r_count_at_round.append(r_list[i])\n",
    "        \n",
    "    #since the count is zero at the start of the game insert a count of zero at the start\n",
    "    r_count_at_round.insert(0,0)\n",
    "    \n",
    "    #the final element is irrelevant bc we dont play the next hand\n",
    "    r_count_at_round = r_count_at_round[:-1]\n",
    "        \n",
    "    r_count_at_round = np.array(r_count_at_round)\n",
    "    \n",
    "    # create an array that represents the true count at the end of each round\n",
    "    t_count_at_round = r_count_at_round / decks_left_at_round\n",
    "    \n",
    "    # assign a variable representing how many games have been played\n",
    "    games_played = len(win_loss_record)\n",
    "    \n",
    "    # how much money we won or lost\n",
    "    winnings = np.sum(winnings)\n",
    "    \n",
    "    # a conditional statement to print the data table if requested by user\n",
    "    if (table == True):\n",
    "        print('|___________________________________________________________________________|')\n",
    "        print('|            {:} games of Blackjack played with a {:} deck shoe                |'\n",
    "             .format(games_played, N))\n",
    "        print('|                                                                           |')\n",
    "        print('|___________________________________________________________________________|')\n",
    "        print('| Running count |   True count  | Dealers hand | Players hand | wins/losses |')\n",
    "        for i in range(games_played):\n",
    "            print('|___________________________________________________________________________|')\n",
    "            print('|{:10}     |    {:^7.1f}    |{:10}    |{:10}    |{:10}   |'\n",
    "                 .format(r_count_at_round[i], t_count_at_round[i], np.sum(dealer_cards[i]), \n",
    "                         np.sum(player_cards[i]), win_loss_record[i]))\n",
    "        print('|___________________________________________________________________________|')\n",
    "\n",
    "    # the return statement give me a win loss record for n games given one_deck*N decks\n",
    "    # as well as a record of the running_count at the point of each win/loss/push\n",
    "    return games_played, win_loss_record, r_count_at_round, t_count_at_round, winnings, winnings_list\n",
    "\n",
    "\n",
    "# write a function to play one hand of blackjack\n",
    "def p2_play_blackjack_onetime(one_deck, b):\n",
    "    \n",
    "    \"\"\"\n",
    "    -------------------------------------------------------------------------------\n",
    "    Play a game of blackjack with a dealer and single player\n",
    "    -------------------------------------------------------------------------------\n",
    "    Takes a deck of cards as an input and plays one hand of blackjack with the deck\n",
    "    -------------------------------------------------------------------------------\n",
    "    Returns: The value of the dealers hand, the players hand, who won and the running\n",
    "             count at the end of the match.\n",
    "    -------------------------------------------------------------------------------\n",
    "    \"\"\"\n",
    "    global bet\n",
    "    bet = b\n",
    "    # create two hands: a dealer and player, to deal cards to\n",
    "    dealers_hand = []\n",
    "    players_hand = []\n",
    "    players_hand2 = []\n",
    "    cards_dealt = []\n",
    "    \n",
    "    # deal cards (player then dealer)\n",
    "    for i in range(2):\n",
    "        players_hand.append(one_deck[0])\n",
    "        cards_dealt.append(one_deck[0])\n",
    "        one_deck.remove(one_deck[0])\n",
    "        dealers_hand.append(one_deck[0])\n",
    "        cards_dealt.append(one_deck[0])\n",
    "        one_deck.remove(one_deck[0])\n",
    "        \n",
    "        \n",
    "    dealers_hand, players_hand, players_hand2, cards_dealt, bet = \\\n",
    "    basic_strategy(dealers_hand, players_hand, cards_dealt, one_deck, bet)\n",
    "        \n",
    "    # conserve the hands as lists in seperate variables\n",
    "    dealers_hand_list = dealers_hand\n",
    "    players_hand_list = players_hand\n",
    "    players_hand_list2 = players_hand2\n",
    "\n",
    "    # convert the list of cards for each hand into an integer\n",
    "    dealers_hand = int(np.sum(dealers_hand_list))\n",
    "    players_hand = int(np.sum(players_hand_list))\n",
    "    players_hand2 = int(np.sum(players_hand_list2))\n",
    "\n",
    "#     else:\n",
    "#         dealers_hand, players_hand, cards_dealt = \\\n",
    "#         basic_strategy(dealers_hand, players_hand, cards_dealt, one_deck)\n",
    "        \n",
    "#         # conserve the hands as lists in seperate variables\n",
    "#         dealers_hand_list = dealers_hand\n",
    "#         players_hand_list = players_hand\n",
    "\n",
    "#         # convert the list of cards for each hand into an integer\n",
    "#         dealers_hand = int(np.sum(dealers_hand_list))\n",
    "#         players_hand = int(np.sum(players_hand_list))\n",
    "    \n",
    "    #run the count for the cards in the dealers hand and the players hand\n",
    "    r_count, r_count_list = count_cards(cards_dealt) #count at end\n",
    "    \n",
    "    winner = 0\n",
    "    \n",
    "    # decide who wins (-1 = dealer win, 0 = push, 1 = player win)\n",
    "    if ((players_hand2) != 0):\n",
    "        # dealer wins when:\n",
    "        if (((dealers_hand > players_hand) and (dealers_hand <= 21)) \\\n",
    "        and ((dealers_hand > players_hand2) and (dealers_hand <= 21))):\n",
    "            winner = -2.0\n",
    "        elif (((players_hand > 21) and (dealers_hand <= 21)) and ((players_hand2 > 21) and (dealers_hand <= 21))):\n",
    "            winner = -2.0\n",
    "        elif (((players_hand > 21) and (dealers_hand > 21)) and ((players_hand2 > 21) and (dealers_hand > 21))):\n",
    "            winner =  -2.0  \n",
    "\n",
    "        #player wins when:\n",
    "        elif ((players_hand > dealers_hand) and (players_hand <= 21)) \\\n",
    "        or ((players_hand2 > dealers_hand) and (players_hand2 <= 21)):\n",
    "            winner = 1.0\n",
    "        elif (((dealers_hand > 21) and (players_hand <= 21)) or ((dealers_hand > 21) and (players_hand2 <= 21))):\n",
    "            winner = 1.0\n",
    "        elif (((players_hand == 21) and (((len(players_hand_list)) == 2) and \\\n",
    "              (players_hand != dealers_hand))) or ((players_hand2 == 21) and ((len(players_hand_list2)) == 2) and \\\n",
    "              (players_hand2 != dealers_hand))):\n",
    "            winner = 1.0\n",
    "        elif ((players_hand > dealers_hand) and (players_hand <= 21)) \\\n",
    "        and ((players_hand2 > dealers_hand) and (players_hand2 <= 21)):\n",
    "            winner = 2.0\n",
    "        elif (((dealers_hand > 21) and (players_hand <= 21)) and ((dealers_hand > 21) and (players_hand2 <= 21))):\n",
    "            winner = 2.0\n",
    "        elif (((players_hand == 21) and (((len(players_hand_list)) == 2) and \\\n",
    "              (players_hand != dealers_hand))) and ((players_hand2 == 21) and ((len(players_hand_list2)) == 2) and \\\n",
    "              (players_hand2 != dealers_hand))):\n",
    "            winner = 2.0\n",
    "        \n",
    "\n",
    "        # push when:\n",
    "        elif ((players_hand == dealers_hand) or (players_hand == dealers_hand)):\n",
    "            winner = 0.0\n",
    "        \n",
    "        else:\n",
    "            pass\n",
    "        \n",
    "    else:\n",
    "        # dealer wins when:\n",
    "        if ((dealers_hand > players_hand) and (dealers_hand <= 21)):\n",
    "            winner = -1.0\n",
    "        elif ((players_hand > 21) and (dealers_hand <= 21)):\n",
    "            winner = -1.0\n",
    "        elif ((players_hand > 21) and (dealers_hand > 21)):\n",
    "            winner =  -1.0  \n",
    "\n",
    "        #player wins when:\n",
    "        elif ((players_hand > dealers_hand) and (players_hand <= 21)):\n",
    "            winner = 1.0\n",
    "        elif ((dealers_hand > 21) and (players_hand <= 21)):\n",
    "            winner = 1.0\n",
    "        elif ((players_hand == 21) and ((len(players_hand_list)) == 2) and \\\n",
    "              (players_hand != dealers_hand)):\n",
    "            winner = 1.0\n",
    "\n",
    "        # push when:\n",
    "        elif (players_hand == dealers_hand):\n",
    "            winner = 0.0\n",
    "            \n",
    "        else:\n",
    "            pass\n",
    "        \n",
    "    money = (bet*winner)\n",
    "    \n",
    "    return dealers_hand_list, players_hand_list, players_hand_list2, dealers_hand, players_hand, \\\n",
    "                players_hand2, winner, cards_dealt, r_count_list, money\n",
    "       \n",
    "# create a function to play blackjack with N decks of cards in the shoe\n",
    "def p2_play_blackjack(N, b, table=False):\n",
    "    \"\"\"Plays blackjack with two players to the end of the shoe with N decks\"\"\"\n",
    "    global all_cards_dealt\n",
    "    global bet\n",
    "    bet = b\n",
    "    # generate a shoe to play with containing N shuffled decks\n",
    "    shoe = n_decks(N)\n",
    "    \n",
    "    ## were going to need to keep track of a lot of data here (populate), including:\n",
    "    ## all the cards that have been dealt after N games (so we can count them)\n",
    "    ## the hands of the dealer throughout N games (for the print table option)\n",
    "    ## the hands of the player throughout N games (for the print table option)\n",
    "    ## the win loss record\n",
    "    ## the count at the end of each round\n",
    "    ## index list to locate what the running count was at the end of each round\n",
    "    all_cards_dealt = []\n",
    "    dealer_cards = []\n",
    "    player_cards = []\n",
    "    player_cards2 = []\n",
    "    win_loss_record = []\n",
    "    r_count_at_round = []\n",
    "    cards_left = []\n",
    "    index = []\n",
    "    winnings = []\n",
    "    winnings_list = []\n",
    "    games_played = 0\n",
    "    \n",
    "    # populate the empty lists seen above with relevant data\n",
    "    while len(shoe) >= 4:\n",
    "        d_h_list, p_h_list, p_h_list2, d_h, p_h, p_h2, win, cards_dealt, r_count_list, money \\\n",
    "            = p2_play_blackjack_onetime(shoe, bet) #unpack the returns from function\n",
    "        \n",
    "        # store the data (carsd dealt, player/dealer hands, wins/losses,the index\n",
    "        all_cards_dealt += cards_dealt\n",
    "        cards_left.append(len(all_cards_dealt))\n",
    "        dealer_cards.append(d_h_list)\n",
    "        player_cards.append(p_h_list)\n",
    "        player_cards2.append(p_h_list2)\n",
    "        win_loss_record.append(win)\n",
    "        index.append(len(all_cards_dealt))\n",
    "        games_played += 1\n",
    "        winnings.append(money)\n",
    "        winnings_list.append(money)\n",
    "        \n",
    "    \n",
    "    # calculate how many cards are left in the shoe (in terms of decks remaining)\n",
    "    cards_left = np.array(cards_left)\n",
    "    cards_left = ((N * 52.) - (cards_left))\n",
    "    decks_left_at_round = (cards_left / 52.)\n",
    "    \n",
    "    \n",
    "    # create an array to index all_cards_dealt after counting them to grab\n",
    "    ## the running count at the end of each round played\n",
    "    index = (np.array(index)) - 1\n",
    "    r_count, r_list = count_cards(all_cards_dealt)\n",
    "    \n",
    "    for i in index:\n",
    "        r_count_at_round.append(r_list[i])\n",
    "        \n",
    "    #since the count is zero at the start of the game insert a count of zero at the start\n",
    "    r_count_at_round.insert(0,0)\n",
    "    \n",
    "    #the final element is irrelevant bc we dont play the next hand\n",
    "    r_count_at_round = r_count_at_round[:-1]\n",
    "        \n",
    "    r_count_at_round = np.array(r_count_at_round)\n",
    "    \n",
    "    # create an array that represents the true count at the end of each round\n",
    "    t_count_at_round = r_count_at_round / decks_left_at_round\n",
    "    \n",
    "    winnings = np.sum(winnings)\n",
    "    \n",
    "    # assign a variable representing how many games have been played\n",
    "#     games_played = len(win_loss_record)\n",
    "    \n",
    "    # a conditional statement to print the data table if requested by user\n",
    "    if (table == True):\n",
    "        print('|___________________________________________________________________________|')\n",
    "        print('|            {:} games of Blackjack played with a {:} deck shoe                |'\n",
    "             .format(games_played, N))\n",
    "        print('|                                                                           |')\n",
    "        print('|___________________________________________________________________________|')\n",
    "        print('| Running count |   True count  | Dealers hand | Players hand | wins/losses |')\n",
    "        for i in range(games_played):\n",
    "            print('|___________________________________________________________________________|')\n",
    "            print('|{:10}     |    {:^7.1f}    |{:10}    |{:10}    |{:10}   |'\n",
    "                 .format(r_count_at_round[i], t_count_at_round[i], np.sum(dealer_cards[i]), \n",
    "                         np.sum(player_cards[i]), win_loss_record[i]))\n",
    "        print('|___________________________________________________________________________|')\n",
    "\n",
    "    # the return statement give me a win loss record for n games given one_deck*N decks\n",
    "    # as well as a record of the running_count at the point of each win/loss/push\n",
    "    return games_played, win_loss_record, r_count_at_round, t_count_at_round, winnings, winnings_list\n",
    "    \n",
    "\n",
    "# write a function to play one hand of blackjack\n",
    "def p3_play_blackjack_onetime(deck, b):\n",
    "    \n",
    "    \"\"\"\n",
    "    -------------------------------------------------------------------------------\n",
    "    Play a game of blackjack with a dealer and single player\n",
    "    -------------------------------------------------------------------------------\n",
    "    Takes a deck of cards as an input and plays one hand of blackjack with the deck\n",
    "    -------------------------------------------------------------------------------\n",
    "    Returns: The value of the dealers hand, the players hand, who won and the running\n",
    "             count at the end of the match.\n",
    "    -------------------------------------------------------------------------------\n",
    "    \"\"\"\n",
    "    global bet\n",
    "    bet = b\n",
    "    # create two hands: a dealer and player, to deal cards to\n",
    "    dealers_hand = []\n",
    "    players_hand = []\n",
    "    players_hand2 = []\n",
    "    cards_dealt = []\n",
    "    \n",
    "    # deal cards (player then dealer)\n",
    "    for i in range(2):\n",
    "        players_hand.append(deck[0])\n",
    "        cards_dealt.append(deck[0])\n",
    "        deck.remove(deck[0])\n",
    "        dealers_hand.append(deck[0])\n",
    "        cards_dealt.append(deck[0])\n",
    "        deck.remove(deck[0])\n",
    "    \n",
    "    dealers_hand, players_hand, players_hand2, cards_dealt, r_count_list, true_count, bet = \\\n",
    "        ill_18(dealers_hand, players_hand, cards_dealt, deck, bet)\n",
    "        \n",
    "    # conserve the hands as lists in seperate variables\n",
    "    dealers_hand_list = dealers_hand\n",
    "    players_hand_list = players_hand\n",
    "    players_hand_list2 = players_hand2\n",
    "        \n",
    "    # convert the list of cards for each hand into an integer\n",
    "    dealers_hand = int(np.sum(dealers_hand_list))\n",
    "    players_hand = int(np.sum(players_hand_list))\n",
    "    players_hand2 = int(np.sum(players_hand_list2))\n",
    "    \n",
    "    winner = 0\n",
    "    \n",
    "    # decide who wins (-1 = dealer win, 0 = push, 1 = player win)\n",
    "    if ((players_hand2) != 0):\n",
    "        # dealer wins when:\n",
    "        if (((dealers_hand > players_hand) and (dealers_hand <= 21)) \\\n",
    "        and ((dealers_hand > players_hand2) and (dealers_hand <= 21))):\n",
    "            winner = -2.0\n",
    "        elif (((players_hand > 21) and (dealers_hand <= 21)) and ((players_hand2 > 21) and (dealers_hand <= 21))):\n",
    "            winner = -2.0\n",
    "        elif (((players_hand > 21) and (dealers_hand > 21)) and ((players_hand2 > 21) and (dealers_hand > 21))):\n",
    "            winner =  -2.0  \n",
    "\n",
    "        #player wins when:\n",
    "        elif ((players_hand > dealers_hand) and (players_hand <= 21)) \\\n",
    "        or ((players_hand2 > dealers_hand) and (players_hand2 <= 21)):\n",
    "            winner = 1.0\n",
    "        elif (((dealers_hand > 21) and (players_hand <= 21)) or ((dealers_hand > 21) and (players_hand2 <= 21))):\n",
    "            winner = 1.0\n",
    "        elif (((players_hand == 21) and (((len(players_hand_list)) == 2) and \\\n",
    "              (players_hand != dealers_hand))) or ((players_hand2 == 21) and ((len(players_hand_list2)) == 2) and \\\n",
    "              (players_hand2 != dealers_hand))):\n",
    "            winner = 1.0\n",
    "        elif ((players_hand > dealers_hand) and (players_hand <= 21)) \\\n",
    "        and ((players_hand2 > dealers_hand) and (players_hand2 <= 21)):\n",
    "            winner = 2.0\n",
    "        elif (((dealers_hand > 21) and (players_hand <= 21)) and ((dealers_hand > 21) and (players_hand2 <= 21))):\n",
    "            winner = 2.0\n",
    "        elif (((players_hand == 21) and (((len(players_hand_list)) == 2) and \\\n",
    "              (players_hand != dealers_hand))) and ((players_hand2 == 21) and ((len(players_hand_list2)) == 2) and \\\n",
    "              (players_hand2 != dealers_hand))):\n",
    "            winner = 2.0\n",
    "        \n",
    "\n",
    "        # push when:\n",
    "        elif ((players_hand == dealers_hand) or (players_hand == dealers_hand)):\n",
    "            winner = 0.0\n",
    "        \n",
    "        else:\n",
    "            pass\n",
    "        \n",
    "    else:\n",
    "        # dealer wins when:\n",
    "        if ((dealers_hand > players_hand) and (dealers_hand <= 21)):\n",
    "            winner = -1.0\n",
    "        elif ((players_hand > 21) and (dealers_hand <= 21)):\n",
    "            winner = -1.0\n",
    "        elif ((players_hand > 21) and (dealers_hand > 21)):\n",
    "            winner =  -1.0  \n",
    "\n",
    "        #player wins when:\n",
    "        elif ((players_hand > dealers_hand) and (players_hand <= 21)):\n",
    "            winner = 1.0\n",
    "        elif ((dealers_hand > 21) and (players_hand <= 21)):\n",
    "            winner = 1.0\n",
    "        elif ((players_hand == 21) and ((len(players_hand_list)) == 2) and \\\n",
    "              (players_hand != dealers_hand)):\n",
    "            winner = 1.0\n",
    "\n",
    "        # push when:\n",
    "        elif (players_hand == dealers_hand):\n",
    "            winner = 0.0\n",
    "        \n",
    "        else:\n",
    "            pass\n",
    "        \n",
    "    money = winner*bet\n",
    "        \n",
    "    # final results to return: each hand value (as well as list form) and who won\n",
    "    return dealers_hand_list, players_hand_list, players_hand_list2, dealers_hand, players_hand, \\\n",
    "                players_hand2, winner, cards_dealt, r_count_list, true_count, money\n",
    "\n",
    "    \n",
    "# create a function to play blackjack with N decks of cards in the shoe\n",
    "def p3_play_blackjack(N, b, table=False):\n",
    "    \"\"\"Plays blackjack with two players to the end of the shoe with N decks\"\"\"\n",
    "    \n",
    "    # define all_cards_dealt as a global variable\n",
    "    global all_cards_dealt\n",
    "    global bet\n",
    "    \n",
    "    bet = b\n",
    "    # generate a shoe to play with containing N shuffled decks\n",
    "    shoe = n_decks(N)\n",
    "    \n",
    "    ## were going to need to keep track of a lot of data here (populate), including:\n",
    "    ## all the cards that have been dealt after N games (so we can count them)\n",
    "    ## the hands of the dealer throughout N games (for the print table option)\n",
    "    ## the hands of the player throughout N games (for the print table option)\n",
    "    ## the win loss record\n",
    "    ## the count at the end of each round\n",
    "    ## index list to locate what the running count was at the end of each round\n",
    "    all_cards_dealt = []\n",
    "    dealer_cards = []\n",
    "    player_cards = []\n",
    "    win_loss_record = []\n",
    "    r_count_at_round = []\n",
    "    t_count_at_round = []\n",
    "    cards_left = []\n",
    "    index = []\n",
    "    winnings = []\n",
    "    winnings_list = []\n",
    "    \n",
    "    # populate the empty lists seen above with relevant data\n",
    "    while len(shoe) >= 4:\n",
    "        d_h_list, p_h_list, p_h_list2, d_h, p_h, p_h2, win, cards_dealt, r_count_list, true_count, money \\\n",
    "        = p3_play_blackjack_onetime(shoe, bet) #unpack the returns from function\n",
    "        \n",
    "        # store the data (carsd dealt, player/dealer hands, wins/losses,the index\n",
    "        all_cards_dealt += cards_dealt\n",
    "        t_count_at_round.append(true_count)\n",
    "        cards_left.append(len(all_cards_dealt))\n",
    "        dealer_cards.append(d_h_list)\n",
    "        player_cards.append(p_h_list)\n",
    "        win_loss_record.append(win)\n",
    "        index.append(len(all_cards_dealt))\n",
    "        winnings.append(money)\n",
    "        winnings_list.append(money)\n",
    "        \n",
    "    \n",
    "    # calculate how many cards are left in the shoe (in terms of decks remaining)\n",
    "    cards_left = np.array(cards_left)\n",
    "    cards_left = ((N * 52.) - (cards_left))\n",
    "    decks_left_at_round = (cards_left / 52.)\n",
    "    \n",
    "    \n",
    "    # create an array to index all_cards_dealt after counting them to grab\n",
    "    ## the running count at the end of each round played\n",
    "    index = (np.array(index)) - 1\n",
    "    r_count, r_list = count_cards(all_cards_dealt)\n",
    "    \n",
    "    for i in index:\n",
    "        r_count_at_round.append(r_list[i])\n",
    "        \n",
    "    #since the count is zero at the start of the game insert a count of zero at the start\n",
    "    r_count_at_round.insert(0,0)\n",
    "    \n",
    "    #the final element is irrelevant bc we dont play the next hand\n",
    "    r_count_at_round = r_count_at_round[:-1]\n",
    "        \n",
    "    r_count_at_round = np.array(r_count_at_round)\n",
    "    \n",
    "    # assign a variable representing how many games have been played\n",
    "    games_played = len(win_loss_record)\n",
    "    \n",
    "    winnings = np.sum(winnings)\n",
    "    \n",
    "    # a conditional statement to print the data table if requested by user\n",
    "    if (table == True):\n",
    "        print('|___________________________________________________________________________|')\n",
    "        print('|            {:} games of Blackjack played with a {:} deck shoe                |'\n",
    "             .format(games_played, N))\n",
    "        print('|                                                                           |')\n",
    "        print('|___________________________________________________________________________|')\n",
    "        print('| Running count |   True count  | Dealers hand | Players hand | wins/losses |')\n",
    "        for i in range(games_played):\n",
    "            print('|___________________________________________________________________________|')\n",
    "            print('|{:10}     |    {:^7.1f}    |{:10}    |{:10}    |{:10}   |'\n",
    "                 .format(r_count_at_round[i], t_count_at_round[i], np.sum(dealer_cards[i]), \n",
    "                         np.sum(player_cards[i]), win_loss_record[i]))\n",
    "        print('|___________________________________________________________________________|')\n",
    "\n",
    "    # the return statement give me a win loss record for n games given one_deck*N decks\n",
    "    # as well as a record of the running_count at the point of each win/loss/push\n",
    "    return games_played, win_loss_record, r_count_at_round, t_count_at_round, winnings, winnings_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ran\n"
     ]
    }
   ],
   "source": [
    "print('ran')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "games, wins, r_count,t_count, winnings, winnings_l = p1_play_blackjack(6, 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/noamb/ENTER/lib/python3.7/site-packages/ipykernel_launcher.py:2406: RuntimeWarning: invalid value encountered in true_divide\n",
      "/home/noamb/ENTER/lib/python3.7/site-packages/ipykernel_launcher.py:2179: RuntimeWarning: divide by zero encountered in true_divide\n",
      "/home/noamb/ENTER/lib/python3.7/site-packages/ipykernel_launcher.py:2406: RuntimeWarning: divide by zero encountered in true_divide\n",
      "/home/noamb/ENTER/lib/python3.7/site-packages/ipykernel_launcher.py:2179: RuntimeWarning: invalid value encountered in true_divide\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Player 1 statistics:\n",
      "Games: 528704\n",
      "Wins: 36.8% of the time\n",
      "Loss: 54.8% of the time\n",
      "Ties: 8.5% of the time\n",
      "Player 1 wins $-475160.0\n",
      "--------------------\n",
      "Player 2 statistics:\n",
      "Games: 555065\n",
      "Wins: 45.7% of the time\n",
      "Loss: 46.0% of the time\n",
      "Ties: 7.5% of the time\n",
      "Player 2 wins $931265.0\n",
      "--------------------\n",
      "Player 3 statistics:\n",
      "Games: 719342\n",
      "Wins: 41.9% of the time\n",
      "Loss: 48.7% of the time\n",
      "Ties: 9.2% of the time\n",
      "Player 3 wins $-294170.0\n"
     ]
    }
   ],
   "source": [
    "# lets start looking at the data\n",
    "\n",
    "# now lets create some arrays to do data analysis on: for each player lets see what their wins loss and tie percentages are in a 6 deck shoe\n",
    "games_1 = []\n",
    "p1_win_loss = []\n",
    "all_p1_wins =[]\n",
    "all_p1_loss = []\n",
    "all_p1_ties = []\n",
    "all_p1_winnings = []\n",
    "t_1 = []\n",
    "\n",
    "\n",
    "games_2 = []\n",
    "p2_win_loss = []\n",
    "all_p2_wins =[]\n",
    "all_p2_loss = []\n",
    "all_p2_ties = []\n",
    "all_p2_winnings = []\n",
    "t_2 = []\n",
    "\n",
    "\n",
    "games_3 = []\n",
    "p3_win_loss = []\n",
    "all_p3_wins = []\n",
    "all_p3_loss = []\n",
    "all_p3_ties = []\n",
    "all_p3_winnings = []\n",
    "t_3 = []\n",
    "\n",
    "for i in range(10000):\n",
    "    p1_wins = []\n",
    "    p1_loss = []\n",
    "    p1_ties = []\n",
    "\n",
    "    p2_wins = []\n",
    "    p2_loss = []\n",
    "    p2_ties = []\n",
    "\n",
    "    p3_wins = []\n",
    "    p3_loss = []\n",
    "    p3_ties = []\n",
    "\n",
    "    games1, wins1, r1, t1, m1, m1_l =  p1_play_blackjack(6, 5)\n",
    "    games2, wins2, r2, t2, m2, m2_l =  p2_play_blackjack(6, 5)\n",
    "    games3, wins3, r3, t3, m3, m3_l =  p3_play_blackjack(6, 5)\n",
    "    \n",
    "    games_1.append(games1)\n",
    "    games_2.append(games2)\n",
    "    games_3.append(games3)\n",
    "    \n",
    "    all_p1_winnings.append(m1)\n",
    "    all_p2_winnings.append(m2)\n",
    "    all_p3_winnings.append(m3)\n",
    "    \n",
    "    \n",
    "\n",
    "    # create data sets for player 1\n",
    "    for i in wins1:\n",
    "        if (i == 1):\n",
    "            p1_wins.append(i)\n",
    "        elif (i == -1):\n",
    "            p1_loss.append(i)\n",
    "        elif (i == 0):\n",
    "            p1_ties.append(i)\n",
    "        else:\n",
    "            pass\n",
    "\n",
    "    # create data sets for player 2\n",
    "    for i in wins2:\n",
    "        if (i == 1):\n",
    "            p2_wins.append(i)\n",
    "        elif (i == -1):\n",
    "            p2_loss.append(i)\n",
    "        elif (i == 0):\n",
    "            p2_ties.append(i)\n",
    "        else:\n",
    "            pass\n",
    "    \n",
    "    # create data sets for player 3\n",
    "    for i in wins3:\n",
    "        if (i == 1):\n",
    "            p3_wins.append(i)\n",
    "        elif (i == -1):\n",
    "            p3_loss.append(i)\n",
    "        elif (i == 0):\n",
    "            p3_ties.append(i)\n",
    "        else:\n",
    "            pass\n",
    "        \n",
    "    all_p1_wins.append(len(p1_wins))\n",
    "    all_p1_loss.append(len(p1_loss))\n",
    "    all_p1_ties.append(len(p1_ties))\n",
    "\n",
    "    all_p2_wins.append(len(p2_wins))\n",
    "    all_p2_loss.append(len(p2_loss))\n",
    "    all_p2_ties.append(len(p2_ties))\n",
    "\n",
    "    all_p3_wins.append(len(p3_wins))\n",
    "    all_p3_loss.append(len(p3_loss))\n",
    "    all_p3_ties.append(len(p3_ties))\n",
    "\n",
    "# add up all the wins losses and ties over n games\n",
    "p1_games = np.sum(games_1)\n",
    "p1_wins = np.mean(all_p1_wins)\n",
    "p1_loss = np.mean(all_p1_loss)\n",
    "p1_ties = np.mean(all_p1_ties)\n",
    "p1_winnings = np.sum(all_p1_winnings)\n",
    "   \n",
    "p2_games = np.sum(games_2)\n",
    "p2_wins = np.mean(all_p2_wins)\n",
    "p2_loss = np.mean(all_p2_loss)\n",
    "p2_ties = np.mean(all_p2_ties)\n",
    "p2_winnings = np.sum(all_p2_winnings)\n",
    "\n",
    "p3_games = np.sum(games_3)\n",
    "p3_wins = np.mean(all_p3_wins)\n",
    "p3_loss = np.mean(all_p3_loss)\n",
    "p3_ties = np.mean(all_p3_ties)\n",
    "p3_winnings = np.sum(all_p3_winnings)\n",
    "\n",
    "\n",
    "\n",
    "# now lets take a look at the percentages\n",
    "print('Player 1 statistics:')\n",
    "print('Games:', p1_games)\n",
    "print('Wins: {:.1f}% of the time'.format((np.sum(all_p1_wins)/p1_games)*100.))\n",
    "print('Loss: {:.1f}% of the time'.format((np.sum(all_p1_loss)/p1_games)*100.))\n",
    "print('Ties: {:.1f}% of the time'.format((np.sum(all_p1_ties)/p1_games)*100.))\n",
    "print('Player 1 wins ${:}'.format(p1_winnings))\n",
    "print('--------------------')\n",
    "print('Player 2 statistics:')\n",
    "print('Games:', p2_games)\n",
    "print('Wins: {:.1f}% of the time'.format((np.sum(all_p2_wins)/p2_games)*100.))\n",
    "print('Loss: {:.1f}% of the time'.format((np.sum(all_p2_loss)/p2_games)*100.))\n",
    "print('Ties: {:.1f}% of the time'.format((np.sum(all_p2_ties)/p2_games)*100.))\n",
    "print('Player 2 wins ${:}'.format(p2_winnings))\n",
    "print('--------------------')\n",
    "print('Player 3 statistics:')\n",
    "print('Games:', p3_games)\n",
    "print('Wins: {:.1f}% of the time'.format((np.sum(all_p3_wins)/p3_games)*100.))\n",
    "print('Loss: {:.1f}% of the time'.format((np.sum(all_p3_loss)/p3_games)*100.))\n",
    "print('Ties: {:.1f}% of the time'.format((np.sum(all_p3_ties)/p3_games)*100.))\n",
    "print('Player 3 wins ${:}'.format(p3_winnings))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = all_p1_wins\n",
    "y = all_p1_winnings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9635464977573266\n",
      "0.0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x,y)\n",
    "plt.title('Wins vs. Profit')\n",
    "plt.xlabel('')\n",
    "corr, p = pearsonr(x,y)\n",
    "print(corr)\n",
    "print(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "The mean value for player 1 wins over 528704 games: 19.4481, SD: 3.591087076360026\n"
     ]
    }
   ],
   "source": [
    "# lets plot the histograms for the number of wins, losses, ties for each player\n",
    "w1 = all_p1_wins\n",
    "plt.hist(w1, bins = 30, weights=np.ones(len(w1)) / len(w1))\n",
    "plt.gca().yaxis.set_major_formatter(PercentFormatter(1))\n",
    "plt.title('Player 1: Occurance of wins over {:} games'.format(np.sum(games_1)))\n",
    "plt.xlabel('Number of wins')\n",
    "plt.ylabel('Occurance')\n",
    "plt.show();\n",
    "\n",
    "l1 = all_p1_loss\n",
    "plt.hist(l1, bins = 30, weights=np.ones(len(l1)) / len(l1))\n",
    "plt.gca().yaxis.set_major_formatter(PercentFormatter(1))\n",
    "plt.title('Player 1: Occurance of losses over {:} games'.format(np.sum(games_1)))\n",
    "plt.xlabel('Number of losses')\n",
    "plt.ylabel('Occurance')\n",
    "plt.show();\n",
    "    \n",
    "t1 = all_p1_ties\n",
    "plt.hist(t1, bins = 30, weights=np.ones(len(t1)) / len(t1))\n",
    "plt.gca().yaxis.set_major_formatter(PercentFormatter(1))\n",
    "plt.title('Player 1: Occurance of ties over {:} games'.format(np.sum(games_1)))\n",
    "plt.xlabel('Number of ties')\n",
    "plt.ylabel('Occurance')\n",
    "plt.show();\n",
    "print('')\n",
    "print('')\n",
    "print('The mean value for player 1 wins over {} games: {}, SD: {}'.format((np.sum(games_1)), (np.mean(w1)), (np.std(w1))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "The mean value for player 2 wins over 555065 games: 25.3557, SD: 3.6631649580656336\n"
     ]
    }
   ],
   "source": [
    "# lets plot the histograms for the number of wins, losses, ties for each player\n",
    "w2 = all_p2_wins\n",
    "plt.hist(w2, bins = 30, weights=np.ones(len(w2)) / len(w2))\n",
    "plt.gca().yaxis.set_major_formatter(PercentFormatter(1))\n",
    "plt.title('Player 2: Occurance of wins over {:} games'.format(np.sum(games_2)))\n",
    "plt.xlabel('Number of wins')\n",
    "plt.ylabel('Occurance')\n",
    "plt.show();\n",
    "\n",
    "l2 = all_p2_loss\n",
    "plt.hist(l2, bins = 30, weights=np.ones(len(l2)) / len(l2))\n",
    "plt.gca().yaxis.set_major_formatter(PercentFormatter(1))\n",
    "plt.title('Player 2: Occurance of losses over {:} games'.format(np.sum(games_2)))\n",
    "plt.xlabel('Number of losses')\n",
    "plt.ylabel('Occurance')\n",
    "plt.show();\n",
    "    \n",
    "t2 = all_p2_ties\n",
    "plt.hist(t2, bins = 30, weights=np.ones(len(t2)) / len(t2))\n",
    "plt.gca().yaxis.set_major_formatter(PercentFormatter(1))\n",
    "plt.title('Player 2: Occurance of ties over {:} games'.format(np.sum(games_2)))\n",
    "plt.xlabel('Number of ties')\n",
    "plt.ylabel('Occurance')\n",
    "plt.show();\n",
    "print('')\n",
    "print('')\n",
    "print('The mean value for player 2 wins over {} games: {}, SD: {}'.format((np.sum(games_2)), (np.mean(w2)), (np.std(w2))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "The mean value for player 3 wins over 719342 games: 30.1052, SD: 4.045458312725518\n"
     ]
    }
   ],
   "source": [
    "# lets plot the histograms for the number of wins, losses, ties for each player\n",
    "w3 = all_p3_wins\n",
    "plt.hist(w3, bins = 30, weights=np.ones(len(w3)) / len(w3))\n",
    "plt.gca().yaxis.set_major_formatter(PercentFormatter(1))\n",
    "plt.title('Player 3: Occurance of wins over {:} games'.format(np.sum(games_3)))\n",
    "plt.xlabel('Number of wins')\n",
    "plt.ylabel('Occurance')\n",
    "plt.show();\n",
    "\n",
    "l3 = all_p3_loss\n",
    "plt.hist(l3, bins = 30, weights=np.ones(len(l3)) / len(l3))\n",
    "plt.gca().yaxis.set_major_formatter(PercentFormatter(1))\n",
    "plt.title('Player 3: Occurance of losses over {:} games'.format(np.sum(games_3)))\n",
    "plt.xlabel('Number of losses')\n",
    "plt.ylabel('Occurance')\n",
    "plt.show();\n",
    "    \n",
    "t3 = all_p3_ties\n",
    "plt.hist(t3, bins = 30, weights=np.ones(len(t3)) / len(t3))\n",
    "plt.gca().yaxis.set_major_formatter(PercentFormatter(1))\n",
    "plt.title('Player 3: Occurance of ties over {:} games'.format(np.sum(games_3)))\n",
    "plt.xlabel('Number of ties')\n",
    "plt.ylabel('Occurance')\n",
    "plt.show();\n",
    "print('')\n",
    "print('')\n",
    "print('The mean value for player 3 wins over {} games: {}, SD: {}'.format((np.sum(games_3)), (np.mean(w3)), (np.std(w3))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_indResult(statistic=-87.0223772272296, pvalue=0.0)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.ttest_ind(w2, w3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/noamb/ENTER/lib/python3.7/site-packages/ipykernel_launcher.py:2406: RuntimeWarning: divide by zero encountered in true_divide\n",
      "/home/noamb/ENTER/lib/python3.7/site-packages/scipy/stats/stats.py:3007: RuntimeWarning: invalid value encountered in subtract\n",
      "  xm, ym = x - mx, y - my\n",
      "/home/noamb/ENTER/lib/python3.7/site-packages/scipy/stats/stats.py:3008: RuntimeWarning: invalid value encountered in reduce\n",
      "  r_num = np.add.reduce(xm * ym)\n",
      "/home/noamb/ENTER/lib/python3.7/site-packages/ipykernel_launcher.py:2406: RuntimeWarning: invalid value encountered in true_divide\n",
      "/home/noamb/ENTER/lib/python3.7/site-packages/ipykernel_launcher.py:2179: RuntimeWarning: invalid value encountered in true_divide\n",
      "/home/noamb/ENTER/lib/python3.7/site-packages/ipykernel_launcher.py:2179: RuntimeWarning: divide by zero encountered in true_divide\n",
      "/home/noamb/ENTER/lib/python3.7/site-packages/scipy/stats/stats.py:3008: RuntimeWarning: invalid value encountered in multiply\n",
      "  r_num = np.add.reduce(xm * ym)\n"
     ]
    }
   ],
   "source": [
    "t_rs1 = []\n",
    "t_ps1 = []\n",
    "\n",
    "t_rs2 = []\n",
    "t_ps2 = []\n",
    "\n",
    "t_rs3 = []\n",
    "t_ps3 = []\n",
    "\n",
    "for i in range(10000):\n",
    "    \n",
    "    games_played_1, win_loss_1, r_count_at_round_1, t_count_at_round_1, m1, m11 = p1_play_blackjack(6,5)\n",
    "    x1 = (t_count_at_round_1)\n",
    "    y1 = np.cumsum(win_loss_1)\n",
    "    corr1, p1 = pearsonr(x1,y1)\n",
    "    t_rs1.append(corr1)\n",
    "    t_ps1.append(p1)\n",
    "    \n",
    "    games_played_2, win_loss_2, r_count_at_round_2, t_count_at_round_2, m2, m22 = p2_play_blackjack(6,5)\n",
    "    x2 = (t_count_at_round_2)\n",
    "    y2 = np.cumsum(win_loss_2)\n",
    "    corr2, p2 = pearsonr(x2,y2)\n",
    "    t_rs2.append(corr2)\n",
    "    t_ps2.append(p2)\n",
    "    \n",
    "    games_played_3, win_loss_3, r_count_at_round_3, t_count_at_round_3, m3, m33 = p3_play_blackjack(6,5)\n",
    "    x3 = (t_count_at_round_3)\n",
    "    y3 = np.cumsum(win_loss_3)\n",
    "    corr3, p3 = pearsonr(x3,y3)\n",
    "    t_rs3.append(corr3)\n",
    "    t_ps3.append(p3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear correlation (player 1): There is a nan% chance that the wins and true count are correlated. p=0.5895500083697542\n",
      "Linear correlation (player 2): There is a nan% chance that the wins and true count are correlated\n",
      "Linear correlation (player 3): There is a 0.3% chance that the wins and true count are correlated\n"
     ]
    }
   ],
   "source": [
    "# test the linear r and p values for players 1,2,3 in relation to the count    \n",
    "t_r1 = np.mean(t_rs1)\n",
    "std_tr1 = np.std(t_rs1)\n",
    "\n",
    "t_p1 = np.mean(t_ps1)\n",
    "std_tp1 = np.std(t_ps1)\n",
    "\n",
    "\n",
    "t_r2 = np.mean(t_rs2)\n",
    "std_tr2 = np.std(t_rs2)\n",
    "\n",
    "t_p2 = np.mean(t_ps2)\n",
    "std_tp2 = np.std(t_ps2)\n",
    "\n",
    "    \n",
    "t_r3 = np.mean(t_rs3)\n",
    "std_tr3 = np.std(t_rs3)\n",
    "\n",
    "t_p3 = np.mean(t_ps3)\n",
    "std_tp3 = np.std(t_ps3)\n",
    "\n",
    "print('Linear correlation (player 1): There is a {:.1f}% chance that the wins and true count are correlated. p={:}'\n",
    "      .format((np.absolute(t_r1*100.)), t_p1))\n",
    "print('Linear correlation (player 2): There is a {:.1f}% chance that the wins and true count are correlated'\n",
    "      .format((np.absolute(t_r2*100.)), t_p1))\n",
    "print('Linear correlation (player 3): There is a {:.1f}% chance that the wins and true count are correlated'\n",
    "      .format((np.absolute(t_r3*100.)), t_p1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Non-linear correlation: There is a 6.1% chance that the wins and true count are correlated\n"
     ]
    }
   ],
   "source": [
    "t_rs = []\n",
    "t_ps = []\n",
    "\n",
    "for i in range(100):\n",
    "    games_played_3, win_loss_3, r_count_at_round_3, t_count_at_round_3, m3, m33 = p3_play_blackjack(6,5)\n",
    "    x = (t_count_at_round_3)\n",
    "    y = np.cumsum(win_loss_3)\n",
    "    corr, p = (stats.spearmanr(x,y))\n",
    "    t_rs.append(corr)\n",
    "    t_ps.append(p)\n",
    "    \n",
    "t_r = np.mean(t_rs)\n",
    "std_tr = np.std(t_rs)\n",
    "\n",
    "t_p = np.mean(t_ps)\n",
    "std_tp = np.std(t_ps)\n",
    "\n",
    "print('Non-linear correlation: There is a {:.1f}% chance that the wins and true count are correlated'.format(np.absolute(t_r*100.)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "correlation for wins and true count\n",
      "player 1 r: nan\n",
      "player 1 p: nan\n",
      "player 2 r: nan\n",
      "player 2 p: nan\n",
      "player 3 r: -0.02781283372005856\n",
      "player 3 p: 0.15204797905720266\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/noamb/ENTER/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2920: RuntimeWarning: Mean of empty slice.\n",
      "  out=out, **kwargs)\n",
      "/home/noamb/ENTER/lib/python3.7/site-packages/numpy/core/_methods.py:85: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  ret = ret.dtype.type(ret / rcount)\n"
     ]
    }
   ],
   "source": [
    "# iterate through games with each player and test the correlation and signifigance of the count vs. wins\n",
    "#empty lists to populate for the r and p value for each player\n",
    "r1 = []\n",
    "p1 = []\n",
    "\n",
    "r2 = []\n",
    "p2 = []\n",
    "\n",
    "r3 = []\n",
    "p3 = []\n",
    "\n",
    "# loop through a 6 deck game 100 times and test correlation by appending values of r and p then taking the mean of each\n",
    "for i in range(100): \n",
    "    \n",
    "#     # lets start by taking the values of player one (who doesnt know how to play very well)\n",
    "#     wins1 = []\n",
    "#     count1 = []\n",
    "\n",
    "#     games_played_1, win_loss_1, r_count_at_round_1, t_count_at_round_1, m1, m11 = p1_play_blackjack(6)\n",
    "#     x1 = win_loss_1\n",
    "#     get_indexes1 = lambda x, xs: [i for (y, i) in zip(xs, range(len(xs))) if x == y]\n",
    "#     indexes1 = (get_indexes1(1,x1))\n",
    "\n",
    "#     for i in win_loss_1:\n",
    "#         if (i == 1):\n",
    "#             wins1.append(i)\n",
    "#     for i in indexes1:\n",
    "#         count1.append(t_count_at_round_1[i])\n",
    "        \n",
    "#     x1 = count1\n",
    "#     y1 = np.cumsum(wins1)\n",
    "#     rs1, ps1 = (stats.pearsonr(x1,y1))\n",
    "#     r1.append(rs1)\n",
    "#     p1.append(ps1)\n",
    "\n",
    "#     # again for player 2 (basic strategy)\n",
    "#     wins2 = []\n",
    "#     count2 = []\n",
    "\n",
    "#     games_played_2, win_loss_2, r_count_at_round_2, t_count_at_round_2, m2, m22 = p2_play_blackjack(6)\n",
    "#     x2 = win_loss_2\n",
    "#     get_indexes2 = lambda x, xs: [i for (y, i) in zip(xs, range(len(xs))) if x == y]\n",
    "#     indexes2 = (get_indexes2(1,x2))\n",
    "\n",
    "#     for i in win_loss_2:\n",
    "#         if (i == 1):\n",
    "#             wins2.append(i)\n",
    "#     for i in indexes2:\n",
    "#         count2.append(t_count_at_round_2[i])\n",
    "        \n",
    "#     x2 = count2\n",
    "#     y2 = np.cumsum(wins2)\n",
    "#     rs2, ps2 = (stats.pearsonr(x2,y2))\n",
    "#     r2.append(rs2)\n",
    "#     p2.append(ps2)\n",
    "        \n",
    "    # again for player 3 (card counter)\n",
    "    wins3 = []\n",
    "    count3 = []\n",
    "\n",
    "    games_played_3, win_loss_3, r_count_at_round_3, t_count_at_round_3, m3, m33 = p3_play_blackjack(6, 5)\n",
    "    x3 = win_loss_3\n",
    "    get_indexes3 = lambda x, xs: [i for (y, i) in zip(xs, range(len(xs))) if x == y]\n",
    "    indexes3 = (get_indexes3(1,x3))\n",
    "\n",
    "    for i in win_loss_3:\n",
    "        if (i == 1):\n",
    "            wins3.append(i)\n",
    "            \n",
    "    for i in indexes3:\n",
    "        count3.append(t_count_at_round_3[i])\n",
    "    \n",
    "        \n",
    "    x3 = count3\n",
    "    y3 = np.cumsum(wins3)\n",
    "    rs3, ps3 = (stats.pearsonr(x3,y3))\n",
    "    r3.append(rs3)\n",
    "    p3.append(ps3)\n",
    "    \n",
    "# remove the infinities\n",
    "r1 = [x for x in r1 if str(x) != 'nan']\n",
    "r2 = [x for x in r2 if str(x) != 'nan']\n",
    "r3 = [x for x in r3 if str(x) != 'nan']\n",
    "\n",
    "p1 = [x for x in p1 if str(x) != 'nan']\n",
    "p2 = [x for x in p2 if str(x) != 'nan']\n",
    "p3 = [x for x in p3 if str(x) != 'nan']\n",
    "\n",
    "print('correlation for wins and true count')\n",
    "print('player 1 r:', np.mean(r1))\n",
    "print('player 1 p:', np.mean(p1))\n",
    "\n",
    "print('player 2 r:', np.mean(r2))\n",
    "print('player 2 p:', np.mean(p2))\n",
    "\n",
    "print('player 3 r:', np.mean(r3))\n",
    "print('player 3 p:', np.mean(p3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Number of wins')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x3, y3)\n",
    "plt.title('Wins vs. count at each win')\n",
    "plt.xlabel('Count')\n",
    "plt.ylabel('Number of wins')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/noamb/ENTER/lib/python3.7/site-packages/ipykernel_launcher.py:2179: RuntimeWarning: invalid value encountered in true_divide\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "too many values to unpack (expected 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-15-3ce320cd9ad7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mgames_played_1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwin_loss_1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mr_count_at_round_1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mt_count_at_round_1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mm1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mp1_play_blackjack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt_count_at_round_1\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mm1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: too many values to unpack (expected 5)"
     ]
    }
   ],
   "source": [
    "games_played_1, win_loss_1, r_count_at_round_1, t_count_at_round_1, m1 = p1_play_blackjack(6,5)\n",
    "print(np.sum(t_count_at_round_1[:-1]))\n",
    "print(m1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# iterate through games with each player and test the correlation and signifigance of the count vs. wins\n",
    "#empty lists to populate for the r and p value for each player\n",
    "r1 = []\n",
    "p1 = []\n",
    "\n",
    "r2 = []\n",
    "p2 = []\n",
    "\n",
    "r3 = []\n",
    "p3 = []\n",
    "\n",
    "# loop through a 6 deck game 100 times and test correlation by appending values of r and p then taking the mean of each\n",
    "for i in range(100): \n",
    "    \n",
    "    # lets start by taking the values of player one (who doesnt know how to play very well)\n",
    "    games_played_1, win_loss_1, r_count_at_round_1, t_count_at_round_1, m1, m11 = p1_play_blackjack(6,5)\n",
    "    x1 = np.sum(t_count_at_round_1[:-1])\n",
    "    y1 = np.cumsum(m1)\n",
    "    rs1, ps1 = (stats.spearmanr(x1,y1))\n",
    "    r1.append(rs1)\n",
    "    p1.append(ps1)\n",
    "\n",
    "    # again for player 2 (basic strategy)\n",
    "    games_played_2, win_loss_2, r_count_at_round_2, t_count_at_round_2, m2, m22 = p2_play_blackjack(6,5)\n",
    "    x2 = np.sum(t_count_at_round_2[:-1])\n",
    "    y2 = np.cumsum(m2)\n",
    "    rs2, ps2 = (stats.spearmanr(x2,y2))\n",
    "    r2.append(rs2)\n",
    "    p2.append(ps2)\n",
    "        \n",
    "    # again for player 3 (card counter)\n",
    "    games_played_3, win_loss_3, r_count_at_round_3, t_count_at_round_3, m3, m33 = p3_play_blackjack(6,5)\n",
    "    x3 = np.sum(t_count_at_round_3[:-1])\n",
    "    y3 = np.cumsum(m3)\n",
    "    rs3, ps3 = (stats.spearmanr(x3,y3))\n",
    "    r3.append(rs3)\n",
    "    p3.append(ps3)\n",
    "    \n",
    "# remove the infinities\n",
    "r1 = [x for x in r1 if str(x) != 'nan']\n",
    "r2 = [x for x in r2 if str(x) != 'nan']\n",
    "r3 = [x for x in r3 if str(x) != 'nan']\n",
    "\n",
    "p1 = [x for x in p1 if str(x) != 'nan']\n",
    "p2 = [x for x in p2 if str(x) != 'nan']\n",
    "p3 = [x for x in p3 if str(x) != 'nan']\n",
    "\n",
    "print('correlation for profit and true count')\n",
    "print('player 1 r:', np.mean(r1))\n",
    "print('player 1 p:', np.mean(p1))\n",
    "\n",
    "print('player 2 r:', np.mean(r2))\n",
    "print('player 2 p:', np.mean(p2))\n",
    "\n",
    "print('player 3 r:', np.mean(r3))\n",
    "print('player 3 p:', np.mean(p3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# lets iterate through again and append and see if the data follows poisson statistics\n",
    "for i in range(100):\n",
    "    p1_wins = []\n",
    "    p1_loss = []\n",
    "    p1_ties = []\n",
    "\n",
    "    p2_wins = []\n",
    "    p2_loss = []\n",
    "    p2_ties = []\n",
    "\n",
    "    p3_wins = []\n",
    "    p3_loss = []\n",
    "    p3_ties = []\n",
    "\n",
    "    games1, wins1, r1, t1, m1, m11 =  p1_play_blackjack(6,5)\n",
    "    games2, wins2, r2, t2, m2, m22 =  p2_play_blackjack(6,5)\n",
    "    games3, wins3, r3, t3, m3, m33 =  p3_play_blackjack(6,5)\n",
    "    \n",
    "    games_1.append(games1)\n",
    "    games_2.append(games2)\n",
    "    games_3.append(games3)\n",
    "\n",
    "    # create data sets for player 1\n",
    "    for i in wins1:\n",
    "        if (i == 1):\n",
    "            p1_wins.append(i)\n",
    "        elif (i == -1):\n",
    "            p1_loss.append(i)\n",
    "        elif (i == 0):\n",
    "            p1_ties.append(i)\n",
    "        else:\n",
    "            pass\n",
    "\n",
    "    # create data sets for player 2\n",
    "    for i in wins2:\n",
    "        if (i == 1):\n",
    "            p2_wins.append(i)\n",
    "        elif (i == -1):\n",
    "            p2_loss.append(i)\n",
    "        elif (i == 0):\n",
    "            p2_ties.append(i)\n",
    "        else:\n",
    "            pass\n",
    "    \n",
    "    # create data sets for player 3\n",
    "    for i in wins3:\n",
    "        if (i == 1):\n",
    "            p3_wins.append(i)\n",
    "        elif (i == -1):\n",
    "            p3_loss.append(i)\n",
    "        elif (i == 0):\n",
    "            p3_ties.append(i)\n",
    "        else:\n",
    "            pass\n",
    "        \n",
    "    all_p1_wins.append(len(p1_wins))\n",
    "    all_p1_loss.append(len(p1_loss))\n",
    "    all_p1_ties.append(len(p1_ties))\n",
    "\n",
    "    all_p2_wins.append(len(p2_wins))\n",
    "    all_p2_loss.append(len(p2_loss))\n",
    "    all_p2_ties.append(len(p2_ties))\n",
    "\n",
    "    all_p3_wins.append(len(p3_wins))\n",
    "    all_p3_loss.append(len(p3_loss))\n",
    "    all_p3_ties.append(len(p3_ties))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mu1 = np.mean(all_p1_wins)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "std1 = np.std(all_p1_wins)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(mu1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(std1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.sqrt(mu1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
